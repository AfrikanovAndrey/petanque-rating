#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker –∏ Docker Compose
check_dependencies() {
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ production —Ä–µ–∂–∏–º–µ
prod() {
    log "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ production —Ä–µ–∂–∏–º–µ..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    mkdir -p uploads mysql/data
    
    # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ —Å–±–æ—Ä–∫–µ
    info "Backend –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SWC –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ (–±—ã—Å—Ç—Ä–æ –∏ –º–∞–ª–æ –ø–∞–º—è—Ç–∏)"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –±–µ–∑ override —Ñ–∞–π–ª–∞ (docker-compose —Å–æ–±–µ—Ä–µ—Ç backend –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    if command -v docker-compose &> /dev/null; then
        docker-compose -f docker-compose.yml up -d --build
    else
        docker compose -f docker-compose.yml up -d --build
    fi
    
    if [ $? -ne 0 ]; then
        error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –∏–ª–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
        exit 1
    fi
    
    # –ñ–¥–µ–º –ø–æ–∫–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    log "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
    sleep 10
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    check_status
    
    log "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!"
    info "Frontend: http://localhost:3000"
    info "Backend API: http://localhost:3001/api"
    info "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:3000/admin (admin/admin123)"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ dev —Ä–µ–∂–∏–º–µ —Å hot reload
dev() {
    log "–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ dev —Ä–µ–∂–∏–º–µ —Å hot reload..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    mkdir -p uploads mysql/data
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Å override —Ñ–∞–π–ª–æ–º (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è)
    if command -v docker-compose &> /dev/null; then
        docker-compose up
    else
        docker compose up
    fi
    
    log "Dev —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ
dev_service() {
    local service=${1:-}
    
    if [ -z "$service" ]; then
        error "–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–≤–∏—Å: $0 dev-service <backend|frontend|mysql>"
        exit 1
    fi
    
    log "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ '$service' –≤ dev —Ä–µ–∂–∏–º–µ..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    mkdir -p uploads mysql/data
    
    if command -v docker-compose &> /dev/null; then
        docker-compose up "$service"
    else
        docker compose up "$service"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
stop() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    if command -v docker-compose &> /dev/null; then
        docker-compose down
    else
        docker compose down
    fi
    
    log "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
restart() {
    log "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    stop
    sleep 2
    start
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–æ–≤
build() {
    local mode=${1:-production}
    
    if [ "$mode" = "dev" ]; then
        log "–°–±–æ—Ä–∫–∞ dev –æ–±—Ä–∞–∑–æ–≤..."
        
        if command -v docker-compose &> /dev/null; then
            docker-compose build --no-cache
        else
            docker compose build --no-cache
        fi
    else
        log "–°–±–æ—Ä–∫–∞ production –æ–±—Ä–∞–∑–æ–≤..."
        info "Backend –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SWC –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞ (–±—ã—Å—Ç—Ä–æ –∏ –º–∞–ª–æ –ø–∞–º—è—Ç–∏)"
        
        if command -v docker-compose &> /dev/null; then
            docker-compose -f docker-compose.yml build --no-cache
        else
            docker compose -f docker-compose.yml build --no-cache
        fi
    fi
    
    log "–û–±—Ä–∞–∑—ã —Å–æ–±—Ä–∞–Ω—ã!"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
logs() {
    local service=${1:-}
    
    if [ -n "$service" ]; then
        if command -v docker-compose &> /dev/null; then
            docker-compose logs -f "$service"
        else
            docker compose logs -f "$service"
        fi
    else
        if command -v docker-compose &> /dev/null; then
            docker-compose logs -f
        else
            docker compose logs -f
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
check_status() {
    info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    
    if command -v docker-compose &> /dev/null; then
        docker-compose ps
    else
        docker compose ps
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
clean() {
    warn "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã –∏ –¥–∞–Ω–Ω—ã–µ!"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "–û—á–∏—Å—Ç–∫–∞..."
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        if command -v docker-compose &> /dev/null; then
            docker-compose down -v --rmi all
        else
            docker compose down -v --rmi all
        fi
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        sudo rm -rf mysql/data uploads/*
        
        log "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    else
        info "–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
backup() {
    local backup_name="petanque_backup_$(date +%Y%m%d_%H%M%S).sql"
    
    log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: $backup_name"
    
    docker exec petanque-mysql mysqldump -u petanque_user -ppetanque_password petanque_rating > "backups/$backup_name"
    
    if [ $? -eq 0 ]; then
        log "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: backups/$backup_name"
    else
        error "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞!"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞
restore() {
    local backup_file=$1
    
    if [ -z "$backup_file" ]; then
        error "–£–∫–∞–∂–∏—Ç–µ —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞: $0 restore <backup_file>"
        exit 1
    fi
    
    if [ ! -f "$backup_file" ]; then
        error "–§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_file"
        exit 1
    fi
    
    warn "–≠—Ç–æ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: $backup_file"
        
        docker exec -i petanque-mysql mysql -u petanque_user -ppetanque_password petanque_rating < "$backup_file"
        
        if [ $? -eq 0 ]; then
            log "–ë—ç–∫–∞–ø –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        else
            error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±—ç–∫–∞–ø–∞!"
        fi
    else
        info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–º–æ—â–∏
help() {
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–∫–æ–º–∞–Ω–¥–∞> [–æ–ø—Ü–∏–∏]"
    echo ""
    echo "üöÄ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  start        –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ production —Ä–µ–∂–∏–º–µ"
    echo "  dev          –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ dev —Ä–µ–∂–∏–º–µ —Å hot reload"
    echo "  dev-service  –ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –≤ dev —Ä–µ–∂–∏–º–µ (dev-service <service>)"
    echo "  stop         –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo "  restart      –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    echo ""
    echo "üîß –£—Ç–∏–ª–∏—Ç—ã:"
    echo "  build        –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ (build [dev|production])"
    echo "  logs         –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (logs [service])"
    echo "  status       –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
    echo "  clean        –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –æ–±—Ä–∞–∑—ã, –¥–∞–Ω–Ω—ã–µ)"
    echo ""
    echo "üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ:"
    echo "  backup       –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    echo "  restore      –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞ (restore <file>)"
    echo ""
    echo "‚ùì –°–ø—Ä–∞–≤–∫–∞:"
    echo "  help         –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "üìù –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"
    echo "  $0 dev                    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ dev —Ä–µ–∂–∏–º–µ"
    echo "  $0 dev-service backend    # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ backend –≤ dev —Ä–µ–∂–∏–º–µ"
    echo "  $0 dev-service frontend   # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ frontend –≤ dev —Ä–µ–∂–∏–º–µ"
    echo "  $0 build dev              # –°–±–æ—Ä–∫–∞ dev –æ–±—Ä–∞–∑–æ–≤"
    echo "  $0 logs backend           # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ backend"
    echo ""
    echo "üìù –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è production:"
    echo "  $0 start                  # –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ"
    echo "  $0 build production       # –°–±–æ—Ä–∫–∞ production –æ–±—Ä–∞–∑–æ–≤"
    echo "  $0 restore backups/backup_20231120_143000.sql"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    check_dependencies
    
    case "${1:-}" in
        start)
            start
            ;;
        dev)
            dev
            ;;
        dev-service)
            dev_service "$2"
            ;;
        stop)
            stop
            ;;
        restart)
            restart
            ;;
        build)
            build "$2"
            ;;
        logs)
            logs "$2"
            ;;
        status)
            check_status
            ;;
        clean)
            clean
            ;;
        backup)
            mkdir -p backups
            backup
            ;;
        restore)
            restore "$2"
            ;;
        help|--help|-h)
            help
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${1:-}"
            echo ""
            help
            exit 1
            ;;
    esac
}

# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main "$@"
