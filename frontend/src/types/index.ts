// API Response —Ç–∏–ø—ã
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
}

// –ò–≥—Ä–æ–∫
export interface Player {
  id: number;
  name: string;
  gender: string;
  created_at: string;
  updated_at: string;
}

// –¢—É—Ä–Ω–∏—Ä
export interface Tournament {
  id: number;
  name: string;
  date: string;
  created_at: string;
  updated_at: string;
}

// –ö–æ–º–∞–Ω–¥–∞
export interface Team {
  id: number;
  name: string;
  tournament_id: number;
  created_at: string;
  updated_at: string;
}

// –£—á–∞—Å—Ç–Ω–∏–∫ –∫–æ–º–∞–Ω–¥—ã
export interface TeamMember {
  player_id: number;
  player_name: string;
  sort_order: number;
}

// –ö–æ–º–∞–Ω–¥–∞ —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
export interface TeamWithMembers extends Team {
  members: TeamMember[];
}

// Enum –¥–ª—è –ø—Ä–∏—á–∏–Ω –ø–æ–ª—É—á–µ–Ω–∏—è –æ—á–∫–æ–≤
export enum CupPosition {
  // –ö—É–±–∫–∏
  WINNER = "WINNER",
  RUNNER_UP = "RUNNER_UP",
  THIRD_PLACE = "THIRD_PLACE",
  SEMI_FINAL = "SEMI_FINAL",
  QUARTER_FINAL = "QUARTER_FINAL",

  // –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è (—à–≤–µ–π—Ü–∞—Ä–∫–∞)
  QUALIFYING_HIGH = "QUALIFYING_HIGH", // >=3 –ø–æ–±–µ–¥
  QUALIFYING_LOW = "QUALIFYING_LOW", // 1-2 –ø–æ–±–µ–¥
}

export function getCupPositionText(
  cupPosition: CupPosition | string,
  cup?: "A" | "B" | "C" | null,
  qualifyingWins?: number
): string {
  // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  if (typeof cupPosition === "string") {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º PointsReason
    if (Object.values(CupPosition).includes(cupPosition as CupPosition)) {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π enum
      cupPosition = cupPosition as CupPosition;
    } else {
      return cupPosition; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
    }
  }

  if (cup) {
    switch (cupPosition) {
      case CupPosition.WINNER:
        return `ü•á 1 ${cup}`;

      case CupPosition.RUNNER_UP:
        return `ü•à 2 ${cup}`;

      case CupPosition.THIRD_PLACE:
        return `ü•â 3 ${cup}`;

      case CupPosition.SEMI_FINAL:
        return `1/2 ${cup}`;

      case CupPosition.QUARTER_FINAL:
        return `1/4 ${cup}`;
    }
  }

  // TODO: –¥–æ–¥–µ–ª–∞—Ç—å –æ—á–∫–∏ –∑–∞ –ø–æ–±–µ–¥—ã –≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º —ç—Ç–∞–ø–µ
  // switch (cupPosition) {
  //   case CupPosition.QUALIFYING_HIGH:
  //     if (qualifyingWins !== undefined && qualifyingWins >= 3) {
  //       return `–ü–æ–±–µ–¥—ã –≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º —ç—Ç–∞–ø–µ: >= 3`;
  //     }
  //     return "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è >=3 –ø–æ–±–µ–¥";

  //   case CupPosition.QUALIFYING_LOW:
  //     if (
  //       qualifyingWins !== undefined &&
  //       qualifyingWins > 0 &&
  //       qualifyingWins <= 2
  //     ) {
  //       return `–ü–æ–±–µ–¥—ã –≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º —ç—Ç–∞–ø–µ: 1-2`;
  //     }
  //     return "–ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è 1-2 –ø–æ–±–µ–¥—ã";

  //   default:
  //     throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PointsReason: ${cupPosition}`);
  // }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
export function getPointsReasonColor(reason: CupPosition | string): string {
  if (reason === CupPosition.WINNER || reason === "WINNER")
    return "text-yellow-600";
  if (reason === CupPosition.RUNNER_UP || reason === "RUNNER_UP")
    return "text-gray-600";
  if (reason === CupPosition.THIRD_PLACE || reason === "THIRD_PLACE")
    return "text-amber-600";
  return "text-gray-900";
}

// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞
export interface TournamentResult {
  id: number;
  tournament_id: number;
  team_id: number;
  cup_position: CupPosition;
  points: number;
  cup?: "A" | "B" | null; // –ö—É–±–æ–∫ –ê –∏–ª–∏ –ë, null –µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª –≤ –∫—É–±–∫–∏
  qualifying_wins?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥—ã –≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π —á–∞—Å—Ç–∏
  wins?: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ (qualifying_wins + –±–æ–Ω—É—Å—ã –∑–∞ –∫—É–±–∫–∏)
  loses?: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–π
  created_at: string;
  updated_at: string;
  tournament_name?: string;
  tournament_date?: string;
  team_name?: string;
  team_players?: string; // –°—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
  is_counted?: boolean; // –í—Ö–æ–¥–∏—Ç –ª–∏ –≤ —Ç–æ–ø-N –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
}

// –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞
export interface PlayerRating {
  player_id: number | null; // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –¥–ª—è –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ players
  player_name: string;
  gender?: "male" | "female" | null;
  total_points: number;
  rank?: number;
  best_results: TournamentResult[];
  all_results: TournamentResult[];
  licensed_name?: string; // –ü–æ–ª–Ω–æ–µ –∏–º—è –∏–∑ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–π –±–∞–∑—ã
}

// –†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥—ã
export interface TeamRating {
  team_id: number;
  team_name: string;
  players: string[]; // –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤
  total_points: number;
  rank?: number;
  best_results: TournamentResult[];
  all_results: TournamentResult[];
}

// –°—Ç—Ä–æ–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–π—Ç–∏–Ω–≥–∞
export interface RatingTableRow {
  rank: number;
  player_id: number | null;
  player_name: string;
  gender?: "male" | "female" | null;
  total_points: number;
}

// –†–µ–π—Ç–∏–Ω–≥–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—É
export interface RatingsByGender {
  male: PlayerRating[];
  female: PlayerRating[];
  unknown: PlayerRating[];
}

// –†–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª–∞
export interface GenderRatingResponse {
  data: PlayerRating[];
  gender: string;
  count: number;
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ –ø–æ–ª—É
export interface GenderRatingCounts {
  male: number;
  female: number;
  unknown: number;
  total: number;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
export interface RatingSetting {
  id: number;
  setting_name: string;
  setting_value: string;
  description?: string;
  created_at: string;
  updated_at: string;
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
export interface LoginCredentials {
  username: string;
  password: string;
}

export interface AuthResponse {
  success: boolean;
  token?: string;
  message?: string;
  admin?: {
    id: number;
    username: string;
  };
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞
export interface TournamentUpload {
  tournament_name: string;
  tournament_date: string;
  tournament_file: File;
}

// –¢—É—Ä–Ω–∏—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
export interface TournamentWithResults {
  tournament: Tournament;
  results: TournamentResult[];
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
export interface LoadingState {
  isLoading: boolean;
  error?: string;
}

// –ü—Ä–æ–ø—Å—ã –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
}

// –ü—Ä–æ–ø—Å—ã –¥–ª—è —Ñ–æ—Ä–º
export interface FormProps<T = any> {
  initialData?: T;
  onSubmit: (data: T) => Promise<void> | void;
  onCancel?: () => void;
  isLoading?: boolean;
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
export interface Statistics {
  totalPlayers: number;
  totalTournaments: number;
  averageRating: number;
  topPlayer: {
    name: string;
    points: number;
  };
}
