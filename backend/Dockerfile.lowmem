# Dockerfile для серверов с очень ограниченной памятью (< 768 MB)
# Использование: docker build -f Dockerfile.lowmem .

FROM node:18-alpine AS builder

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем package.json и package-lock.json
COPY package*.json ./

# Устанавливаем все зависимости (включая dev для сборки)
RUN npm ci && npm cache clean --force

# Копируем исходный код
COPY . .

# Компилируем TypeScript с минимальным использованием памяти
ENV NODE_OPTIONS="--max-old-space-size=384"
RUN npm run build:low-memory || npm run build
ENV NODE_OPTIONS=""

# Production stage
FROM node:18-alpine AS production

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем package.json и package-lock.json
COPY package*.json ./

# Устанавливаем только production зависимости + необходимые для миграций
RUN npm ci --omit=dev && \
    npm install typescript ts-node && \
    npm cache clean --force

# Копируем скомпилированный код из builder stage
COPY --from=builder /app/dist ./dist

# Копируем исходники для миграций (нужны для ts-node)
COPY --from=builder /app/src ./src
COPY --from=builder /app/tsconfig.json ./tsconfig.json

# Создаем пользователя для безопасности
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001

# Создаем директорию для загрузок и назначаем права
RUN mkdir -p /app/uploads && chown -R nodejs:nodejs /app/uploads
RUN chown -R nodejs:nodejs /app

# Переключаемся на пользователя nodejs
USER nodejs

# Открываем порт
EXPOSE 3001

# Команда запуска
CMD ["npm", "start"]

