import { pool } from "../config/database";
import { RowDataPacket, ResultSetHeader } from "mysql2";
import { calculateWins, calculateLoses } from "../services/winsLosesCalculator";

interface TableColumn extends RowDataPacket {
  Field: string;
  Type: string;
  Null: string;
  Key: string;
  Default: string | null;
  Extra: string;
}

export const addWinsLosesColumns = async () => {
  try {
    console.log(
      "üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ wins –∏ loses –≤ tournament_results..."
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const [columns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );

    const hasWins = columns.some((col) => col.Field === "wins");
    const hasLoses = columns.some((col) => col.Field === "loses");

    if (hasWins && hasLoses) {
      console.log("‚úÖ –°—Ç–æ–ª–±—Ü—ã wins –∏ loses —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
      return;
    }

    // 1. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü wins –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!hasWins) {
      console.log("üìù –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü wins...");
      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD COLUMN wins INT DEFAULT 0 AFTER qualifying_wins
      `);
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü loses –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!hasLoses) {
      console.log("üìù –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü loses...");
      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD COLUMN loses INT DEFAULT 0 AFTER wins
      `);
    }

    // 3. –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    console.log("üîÑ –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ wins –∏ loses –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π...");

    const [existingRows] = await pool.execute<RowDataPacket[]>(
      "SELECT id, points_reason, qualifying_wins FROM tournament_results"
    );

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${existingRows.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);

    for (const row of existingRows) {
      const wins = calculateWins(row.points_reason, row.qualifying_wins || 0);
      const loses = calculateLoses(row.points_reason, row.qualifying_wins || 0);

      await pool.execute(
        "UPDATE tournament_results SET wins = ?, loses = ? WHERE id = ?",
        [wins, loses, row.id]
      );
    }

    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${existingRows.length} –∑–∞–ø–∏—Å–µ–π`);

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    try {
      console.log("üìä –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è wins –∏ loses...");

      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD INDEX idx_wins (wins)
      `);

      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD INDEX idx_loses (loses)
      `);
    } catch (error: any) {
      if (error.code === "ER_DUP_KEYNAME") {
        console.log("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
      } else {
        throw error;
      }
    }

    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const [finalColumns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );
    console.log("üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tournament_results:");
    const winsColumn = finalColumns.find((col) => col.Field === "wins");
    const losesColumn = finalColumns.find((col) => col.Field === "loses");

    if (winsColumn) {
      console.log(
        `  - wins: ${winsColumn.Type} ${
          winsColumn.Null === "NO" ? "NOT NULL" : "NULL"
        } DEFAULT ${winsColumn.Default}`
      );
    }
    if (losesColumn) {
      console.log(
        `  - loses: ${losesColumn.Type} ${
          losesColumn.Null === "NO" ? "NOT NULL" : "NULL"
        } DEFAULT ${losesColumn.Default}`
      );
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  }
};
