import { pool } from "../config/database";
import { RowDataPacket } from "mysql2";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –≤–º–µ—Å—Ç–æ –∏–º–µ–Ω–∏
 * –£–¥–∞–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤–∏–¥–∞ "–§–∞–º–∏–ª–∏—è –ò." (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å ‚Äî –∏–Ω–∏—Ü–∏–∞–ª —Å —Ç–æ—á–∫–æ–π)
 */
export async function removePlayersWithInitials(): Promise<void> {
  const connection = await pool.getConnection();

  try {
    await connection.beginTransaction();
    console.log("üîÑ –ü–æ–∏—Å–∫ –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏...");

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    const [players] = await connection.execute<
      (RowDataPacket & { id: number; name: string })[]
    >(`SELECT id, name FROM players ORDER BY name`);

    console.log(`üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º ${players.length} –∏–≥—Ä–æ–∫–æ–≤`);

    const playersToDelete: Array<{ id: number; name: string }> = [];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏–º—è
    for (const player of players) {
      const parts = player.name.trim().split(/\s+/);

      // –ò—â–µ–º —Å—Ç—Ä–æ–≥–æ –¥–≤—É—Å–æ—Å—Ç–∞–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏: "–§–∞–º–∏–ª–∏—è –ò."
      if (parts.length === 2) {
        const second = parts[1];
        const isInitial = /^(?:[–ê-–ØA-Z]\.)$/.test(second);
        if (isInitial) {
          playersToDelete.push({ id: player.id, name: player.name });
        }
      }
    }

    if (playersToDelete.length === 0) {
      await connection.rollback();
      console.log("‚úÖ –ò–≥—Ä–æ–∫–∏ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
      return;
    }

    console.log(
      `üóëÔ∏è  –£–¥–∞–ª—è–µ–º ${playersToDelete.length} –∏–≥—Ä–æ–∫–æ–≤ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏...`
    );

    for (const p of playersToDelete) {
      await connection.execute(`DELETE FROM players WHERE id = ?`, [p.id]);
      console.log(`   ‚úì –£–¥–∞–ª–µ–Ω: "${p.name}" (ID: ${p.id})`);
    }

    await connection.commit();
    console.log("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  } finally {
    connection.release();
  }
}
