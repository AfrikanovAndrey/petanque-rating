import { pool } from "../config/database";
import { RowDataPacket } from "mysql2";
import { convertCupPositionToPointsReason, PointsReason } from "../types";

interface TableColumn extends RowDataPacket {
  Field: string;
  Type: string;
  Null: string;
  Key: string;
  Default: string | null;
  Extra: string;
}

export const renameCupPositionToPointsReason = async () => {
  try {
    console.log("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ cup_position –≤ points_reason...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const [columns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );

    const hasCupPosition = columns.some((col) => col.Field === "cup_position");
    const hasPointsReason = columns.some(
      (col) => col.Field === "points_reason"
    );

    if (!hasCupPosition && hasPointsReason) {
      console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
      return;
    }

    if (!hasCupPosition) {
      console.log("‚ùå –°—Ç–æ–ª–±–µ—Ü cup_position –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    // 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü points_reason —Å enum (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    if (!hasPointsReason) {
      console.log("üìù –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü points_reason...");
      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD COLUMN points_reason ENUM(
          'CUP_WINNER',
          'CUP_RUNNER_UP', 
          'CUP_THIRD_PLACE',
          'CUP_SEMI_FINAL',
          'CUP_QUARTER_FINAL',
          'QUALIFYING_HIGH',
          'QUALIFYING_LOW'
        ) NOT NULL DEFAULT 'CUP_QUARTER_FINAL' AFTER cup_position
      `);
    } else {
      console.log("‚úÖ –°—Ç–æ–ª–±–µ—Ü points_reason —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    // 2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cup_position –≤ points_reason
    console.log("üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ cup_position –≤ points_reason...");

    const [results] = await pool.execute<RowDataPacket[]>(
      "SELECT id, cup_position FROM tournament_results"
    );

    let convertedCount = 0;
    for (const row of results) {
      const pointsReason = convertCupPositionToPointsReason(row.cup_position);
      await pool.execute(
        "UPDATE tournament_results SET points_reason = ? WHERE id = ?",
        [pointsReason, row.id]
      );
      convertedCount++;
    }

    console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${convertedCount} –∑–∞–ø–∏—Å–µ–π`);

    // 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ª–±–µ—Ü cup_position (–µ—Å–ª–∏ –æ–Ω –µ—â–µ –µ—Å—Ç—å)
    if (hasCupPosition) {
      console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–æ–ª–±–µ—Ü cup_position...");
      await pool.execute(`
        ALTER TABLE tournament_results 
        DROP COLUMN cup_position
      `);
    } else {
      console.log("‚úÖ –°—Ç–æ–ª–±–µ—Ü cup_position —É–∂–µ —É–¥–∞–ª–µ–Ω");
    }

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    try {
      console.log("üìä –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è points_reason...");
      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD INDEX idx_points_reason (points_reason)
      `);
    } catch (error: any) {
      if (error.code === "ER_DUP_KEYNAME") {
        console.log("‚úÖ –ò–Ω–¥–µ–∫—Å idx_points_reason —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      } else {
        throw error;
      }
    }

    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const [finalColumns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );
    console.log("üìã –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tournament_results:");
    finalColumns.forEach((col) => {
      console.log(
        `  - ${col.Field}: ${col.Type} ${
          col.Null === "NO" ? "NOT NULL" : "NULL"
        }`
      );
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  }
};
