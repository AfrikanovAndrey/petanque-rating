import { pool } from "../config/database";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è:
 * 1) –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É points –≤ tournament_results (–µ—Å–ª–∏ –Ω–µ—Ç)
 * 2) –ó–∞–ø–æ–ª–Ω–∏—Ç—å points –∏–∑ player_tournament_points
 * 3) –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É player_tournament_points
 */
export async function addPointsToTournamentResultsAndDropPTP(): Promise<void> {
  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    let colCheck;

    console.log(
      "üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É category –≤ tournaments (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)..."
    );
    [colCheck] = await connection.execute(
      `SELECT COUNT(*) as count
       FROM information_schema.COLUMNS
       WHERE TABLE_SCHEMA = DATABASE()
         AND TABLE_NAME = 'tournaments'
         AND COLUMN_NAME = 'category'`
    );
    const hasCategory = (colCheck as any[])[0].count > 0;

    if (!hasCategory) {
      await connection.execute(
        "ALTER TABLE tournaments ADD COLUMN category ENUM('FEDERAL', 'REGIONAL') NOT NULL AFTER name;"
      );
      console.log("‚úì –ö–æ–ª–æ–Ω–∫–∞ category –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ tournaments");
    } else {
      console.log("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ category —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ tournament_results");
    }

    console.log(
      "üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É teams_count –≤ tournaments (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)..."
    );
    [colCheck] = await connection.execute(
      `SELECT COUNT(*) as count
       FROM information_schema.COLUMNS
       WHERE TABLE_SCHEMA = DATABASE()
         AND TABLE_NAME = 'tournaments'
         AND COLUMN_NAME = 'teams_count'`
    );
    const hasTeamsCount = (colCheck as any[])[0].count > 0;

    if (!hasCategory) {
      await connection.execute(
        "ALTER TABLE tournaments ADD COLUMN teams_count INT NOT NULL AFTER category;"
      );
      console.log("‚úì –ö–æ–ª–æ–Ω–∫–∞ teams_count –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ tournaments");
    } else {
      console.log("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ teams_count —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ tournament_results");
    }

    await connection.commit();
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    await connection.rollback();
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ addPointsToTournamentResultsAndDropPTP:",
      error
    );
    throw error;
  } finally {
    connection.release();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ migrate.ts –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export { addPointsToTournamentResultsAndDropPTP as migrate };

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  addPointsToTournamentResultsAndDropPTP()
    .then(() => {
      console.log("–ú–∏–≥—Ä–∞—Ü–∏—è addPointsToTournamentResultsAndDropPTP –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      process.exit(0);
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
      process.exit(1);
    });
}
