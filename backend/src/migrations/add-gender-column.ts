import { pool } from "../config/database";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è gender –≤ —Ç–∞–±–ª–∏—Ü—É players
 * –í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'male', 'female', null (–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ)
 */
export async function addGenderColumn(): Promise<void> {
  const connection = await pool.getConnection();

  try {
    await connection.beginTransaction();
    console.log("üöª –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è gender –≤ —Ç–∞–±–ª–∏—Ü—É players...");

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ gender
    const [columnCheck] = await connection.execute(`
      SELECT COUNT(*) as count
      FROM information_schema.COLUMNS
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME = 'players'
      AND COLUMN_NAME = 'gender'
    `);

    const hasGenderColumn = (columnCheck as any[])[0].count > 0;

    if (hasGenderColumn) {
      console.log("‚úÖ –ü–æ–ª–µ gender —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ players");
      await connection.commit();
      return;
    }

    // 2. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ gender
    console.log("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ gender...");
    await connection.execute(`
      ALTER TABLE players 
      ADD COLUMN gender ENUM('male', 'female') DEFAULT NULL
      AFTER name
    `);

    // 3. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—É
    console.log("üìä –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è gender...");
    await connection.execute(`
      ALTER TABLE players 
      ADD INDEX idx_gender (gender)
    `);

    await connection.commit();
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è gender –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  } finally {
    connection.release();
  }
}
