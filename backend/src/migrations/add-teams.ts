import { pool } from "../config/database";

const teamsMigrations = [
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–∞–Ω–¥
  `CREATE TABLE IF NOT EXISTS teams (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    tournament_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    INDEX idx_tournament (tournament_id),
    INDEX idx_name (name)
  )`,

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ (1-4 –∏–≥—Ä–æ–∫–∞)
  `CREATE TABLE IF NOT EXISTS team_members (
    id INT AUTO_INCREMENT PRIMARY KEY,
    team_id INT NOT NULL,
    player_id INT NOT NULL,
    sort_order INT NOT NULL DEFAULT 1,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE,
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
    UNIQUE KEY unique_team_player (team_id, player_id),
    INDEX idx_team (team_id),
    INDEX idx_player (player_id),
    INDEX idx_sort_order (team_id, sort_order)
  )`,

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã tournament_results —Å team_id –≤–º–µ—Å—Ç–æ player_id
  `CREATE TABLE IF NOT EXISTS tournament_results_new (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tournament_id INT NOT NULL,
    team_id INT NOT NULL,
    cup_position ENUM('CUP_WINNER', 'CUP_RUNNER_UP', 'CUP_THIRD_PLACE', 'CUP_SEMI_FINAL', 'CUP_QUARTER_FINAL', 'QUALIFYING_HIGH', 'QUALIFYING_LOW') NOT NULL DEFAULT 'CUP_QUARTER_FINAL',
    points INT NOT NULL DEFAULT 0,
    cup ENUM('A', 'B') NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE,
    INDEX idx_tournament_team (tournament_id, team_id),
    INDEX idx_tournament_cup (tournament_id, cup),
    INDEX idx_points (points DESC),
    INDEX idx_cup_position (cup_position)
  )`,
];

const dataMigration = `
  -- –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  -- –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  INSERT INTO teams (name, tournament_id, created_at, updated_at)
  SELECT 
    p.name as name,
    tr.tournament_id,
    tr.created_at,
    tr.updated_at
  FROM tournament_results tr
  JOIN players p ON tr.player_id = p.id;
  
  -- –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—ã
  INSERT INTO team_members (team_id, player_id, sort_order, created_at, updated_at)
  SELECT 
    t.id as team_id,
    tr.player_id,
    1 as sort_order,
    tr.created_at,
    tr.updated_at
  FROM tournament_results tr
  JOIN players p ON tr.player_id = p.id
  JOIN teams t ON t.name = p.name AND t.tournament_id = tr.tournament_id;
  
  -- –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
  INSERT INTO tournament_results_new (tournament_id, team_id, cup_position, points, cup, created_at, updated_at)
  SELECT
    tr.tournament_id,
    t.id as team_id,
    tr.cup_position,
    tr.points,
    tr.cup,
    tr.created_at,
    tr.updated_at
  FROM tournament_results tr
  JOIN players p ON tr.player_id = p.id
  JOIN teams t ON t.name = p.name AND t.tournament_id = tr.tournament_id;
`;

const finalMigrations = [
  // 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
  `DROP TABLE tournament_results`,
  `ALTER TABLE tournament_results_new RENAME TO tournament_results`,
];

export const runTeamsMigrations = async () => {
  const connection = await pool.getConnection();
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –∫–æ–º–∞–Ω–¥...");

    await connection.beginTransaction();

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    for (let i = 0; i < teamsMigrations.length; i++) {
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ${i + 1}/${teamsMigrations.length}...`);
      await connection.execute(teamsMigrations[i]);
    }

    // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log("üìä –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...");
    const statements = dataMigration.split(";").filter((stmt) => stmt.trim());
    for (const statement of statements) {
      if (statement.trim()) {
        await connection.execute(statement.trim());
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
    for (let i = 0; i < finalMigrations.length; i++) {
      console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ${i + 1}/${finalMigrations.length}...`);
      await connection.execute(finalMigrations[i]);
    }

    await connection.commit();
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π –∫–æ–º–∞–Ω–¥:", error);
    throw error;
  } finally {
    connection.release();
  }
};

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runTeamsMigrations()
    .then(() => {
      console.log("–ú–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
      process.exit(0);
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π –∫–æ–º–∞–Ω–¥:", error);
      process.exit(1);
    });
}
