import { pool } from "../config/database";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è:
 * 1) –î–æ–±–∞–≤–∏—Ç—å –∫–æ–ª–æ–Ω–∫—É points –≤ tournament_results (–µ—Å–ª–∏ –Ω–µ—Ç)
 * 2) –ó–∞–ø–æ–ª–Ω–∏—Ç—å points –∏–∑ player_tournament_points
 * 3) –£–¥–∞–ª–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É player_tournament_points
 */
export async function addPointsToTournamentResultsAndDropPTP(): Promise<void> {
  const connection = await pool.getConnection();
  try {
    await connection.beginTransaction();

    console.log(
      "üîÑ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É points –≤ tournament_results (–µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)..."
    );
    const [colCheck] = await connection.execute(
      `SELECT COUNT(*) as count
       FROM information_schema.COLUMNS
       WHERE TABLE_SCHEMA = DATABASE()
         AND TABLE_NAME = 'tournament_results'
         AND COLUMN_NAME = 'points'`
    );
    const hasPoints = (colCheck as any[])[0].count > 0;

    if (!hasPoints) {
      await connection.execute(
        "ALTER TABLE tournament_results ADD COLUMN points INT NOT NULL DEFAULT 0 AFTER qualifying_wins"
      );
      console.log("‚úì –ö–æ–ª–æ–Ω–∫–∞ points –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ tournament_results");
    } else {
      console.log("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ points —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ tournament_results");
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ player_tournament_points ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ
    const [ptpTableCheck] = await connection.execute(
      `SELECT COUNT(*) as count
       FROM information_schema.TABLES
       WHERE TABLE_SCHEMA = DATABASE()
         AND TABLE_NAME = 'player_tournament_points'`
    );
    const hasPTP = (ptpTableCheck as any[])[0].count > 0;

    if (hasPTP) {
      console.log(
        "üì• –ü–µ—Ä–µ–Ω–æ—Å–∏–º points –∏–∑ player_tournament_points –≤ tournament_results..."
      );
      // –ó–∞–ø–æ–ª–Ω—è–µ–º points –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é tournament_id + team_id (—á–µ—Ä–µ–∑ team_players)
      await connection.execute(
        `UPDATE tournament_results tr
         JOIN team_players tp ON tr.team_id = tp.team_id
         JOIN player_tournament_points ptp ON ptp.player_id = tp.player_id AND ptp.tournament_id = tr.tournament_id
         SET tr.points = GREATEST(tr.points, ptp.points)`
      );
      console.log("‚úì –ó–Ω–∞—á–µ–Ω–∏—è points –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ tournament_results");

      console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É player_tournament_points...");
      await connection.execute("DROP TABLE IF EXISTS player_tournament_points");
      console.log("‚úì –¢–∞–±–ª–∏—Ü–∞ player_tournament_points —É–¥–∞–ª–µ–Ω–∞");
    } else {
      console.log(
        "‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ player_tournament_points –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —à–∞–≥ –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø—Ä–æ–ø—É—â–µ–Ω"
      );
    }

    await connection.commit();
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    await connection.rollback();
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ addPointsToTournamentResultsAndDropPTP:",
      error
    );
    throw error;
  } finally {
    connection.release();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ migrate.ts –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
export { addPointsToTournamentResultsAndDropPTP as migrate };

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  addPointsToTournamentResultsAndDropPTP()
    .then(() => {
      console.log("–ú–∏–≥—Ä–∞—Ü–∏—è addPointsToTournamentResultsAndDropPTP –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
      process.exit(0);
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
      process.exit(1);
    });
}
