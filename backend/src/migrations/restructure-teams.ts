import { pool } from "../config/database";

const restructureTeamsMigrations = [
  // 1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É teams_new —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  `CREATE TABLE IF NOT EXISTS teams_new (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tournament_id INT NOT NULL,
    player1_id INT NOT NULL,
    player2_id INT NULL,
    player3_id INT NULL, 
    player4_id INT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    FOREIGN KEY (player1_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (player2_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (player3_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (player4_id) REFERENCES players(id) ON DELETE CASCADE,
    INDEX idx_tournament (tournament_id),
    INDEX idx_player1 (player1_id),
    INDEX idx_player2 (player2_id),
    INDEX idx_player3 (player3_id),
    INDEX idx_player4 (player4_id),
    INDEX idx_team_players (tournament_id, player1_id, player2_id, player3_id, player4_id)
  )`,
];

// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –Ω–æ–≤—É—é
const dataMigration = `
  -- –ú–∏–≥—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  INSERT INTO teams_new (
    id, tournament_id, player1_id, player2_id, player3_id, player4_id, 
    created_at, updated_at
  )
  SELECT 
    t.id,
    t.tournament_id,
    MAX(CASE WHEN tm.sort_order = 1 THEN tm.player_id END) as player1_id,
    MAX(CASE WHEN tm.sort_order = 2 THEN tm.player_id END) as player2_id,
    MAX(CASE WHEN tm.sort_order = 3 THEN tm.player_id END) as player3_id,
    MAX(CASE WHEN tm.sort_order = 4 THEN tm.player_id END) as player4_id,
    t.created_at,
    t.updated_at
  FROM teams t
  LEFT JOIN team_members tm ON t.id = tm.team_id
  GROUP BY t.id, t.tournament_id, t.created_at, t.updated_at;
`;

const finalMigrations = [
  // 2. –£–¥–∞–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ —Å–Ω–∞—á–∞–ª–∞
  `SET FOREIGN_KEY_CHECKS = 0`,
  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—É—é
  `DROP TABLE team_members`,
  `DROP TABLE teams`,
  `ALTER TABLE teams_new RENAME TO teams`,
  // –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –æ–±—Ä–∞—Ç–Ω–æ
  `SET FOREIGN_KEY_CHECKS = 1`,
];

export const runRestructureTeamsMigrations = async () => {
  const connection = await pool.getConnection();
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥...");

    await connection.beginTransaction();

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
    for (let i = 0; i < restructureTeamsMigrations.length; i++) {
      console.log(
        `–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ${i + 1}/${restructureTeamsMigrations.length}...`
      );
      await connection.execute(restructureTeamsMigrations[i]);
    }

    // –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    console.log("üìä –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...");
    const statements = dataMigration.split(";").filter((stmt) => stmt.trim());
    for (const statement of statements) {
      if (statement.trim()) {
        await connection.execute(statement.trim());
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for (let i = 0; i < finalMigrations.length; i++) {
      console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ${i + 1}/${finalMigrations.length}...`);
      await connection.execute(finalMigrations[i]);
    }

    await connection.commit();
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥:", error);
    throw error;
  } finally {
    connection.release();
  }
};

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runRestructureTeamsMigrations()
    .then(() => {
      console.log("–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
      process.exit(0);
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:", error);
      process.exit(1);
    });
}
