import { pool } from "../config/database";
import { detectGender, Gender } from "../utils/genderDetector";
import { RowDataPacket } from "mysql2";

interface PlayerRow {
  id: number;
  name: string;
  gender?: Gender;
}

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è gender —É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
 */
export async function populateGender(): Promise<void> {
  const connection = await pool.getConnection();

  try {
    await connection.beginTransaction();
    console.log("üöª –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª—è gender –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...");

    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∞
    const [players] = await connection.execute<(PlayerRow & RowDataPacket)[]>(
      `SELECT id, name, gender FROM players WHERE gender IS NULL ORDER BY name`
    );

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${players.length} –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∞`);

    let maleCount = 0;
    let femaleCount = 0;
    let ambiguousCount = 0;
    const ambiguousPlayers: string[] = [];

    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    for (const player of players) {
      const genderResult = detectGender(player.name);

      console.log(
        `üë§ ${player.name}: ${genderResult.gender || "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"} (${
          genderResult.confidence
        }) - ${genderResult.reason}`
      );

      if (genderResult.gender && genderResult.confidence !== "low") {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await connection.execute(`UPDATE players SET gender = ? WHERE id = ?`, [
          genderResult.gender,
          player.id,
        ]);

        if (genderResult.gender === "male") {
          maleCount++;
        } else {
          femaleCount++;
        }
      } else {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        ambiguousCount++;
        ambiguousPlayers.push(
          `${player.name} (ID: ${player.id}) - ${genderResult.reason}`
        );
      }
    }

    await connection.commit();

    console.log("‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:");
    console.log(`   üë® –ú—É–∂—á–∏–Ω: ${maleCount}`);
    console.log(`   üë© –ñ–µ–Ω—â–∏–Ω: ${femaleCount}`);
    console.log(`   ‚ùì –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã—Ö: ${ambiguousCount}`);

    if (ambiguousPlayers.length > 0) {
      console.log("\n‚ùì –ò–≥—Ä–æ–∫–∏ —Å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏:");
      ambiguousPlayers.forEach((player) => console.log(`   - ${player}`));
      console.log("\n‚ö†Ô∏è  –î–ª—è —ç—Ç–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞");
    }
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  } finally {
    connection.release();
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
 */
export async function updatePlayerGender(
  playerId: number,
  gender: Gender
): Promise<void> {
  const connection = await pool.getConnection();

  try {
    await connection.execute(`UPDATE players SET gender = ? WHERE id = ?`, [
      gender,
      playerId,
    ]);
    console.log(`‚úÖ –ü–æ–ª –∏–≥—Ä–æ–∫–∞ ID ${playerId} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${gender}`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞:", error);
    throw error;
  } finally {
    connection.release();
  }
}
