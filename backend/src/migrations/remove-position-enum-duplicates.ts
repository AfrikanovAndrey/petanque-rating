import { pool } from "../config/database";
import { RowDataPacket, ResultSetHeader } from "mysql2";

interface TableColumn extends RowDataPacket {
  Field: string;
  Type: string;
  Null: string;
  Key: string;
  Default: string | null;
  Extra: string;
}

export const removePositionEnumDuplicates = async () => {
  try {
    console.log(
      "üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è: –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è POSITION_* –∑–Ω–∞—á–µ–Ω–∏–π –≤ enum points_reason..."
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const [columns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );

    const hasPointsReason = columns.some(
      (col) => col.Field === "points_reason"
    );

    if (!hasPointsReason) {
      console.log("‚ùå –°—Ç–æ–ª–±–µ—Ü points_reason –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ —Å POSITION_* –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ CUP_*
    console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º POSITION_* –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ CUP_*...");

    // POSITION_1 -> CUP_WINNER
    const [result1] = await pool.execute<ResultSetHeader>(
      "UPDATE tournament_results SET points_reason = 'CUP_WINNER' WHERE points_reason = 'POSITION_1'"
    );
    console.log(
      `‚úÖ POSITION_1 -> CUP_WINNER: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result1.affectedRows} –∑–∞–ø–∏—Å–µ–π`
    );

    // POSITION_2 -> CUP_RUNNER_UP
    const [result2] = await pool.execute<ResultSetHeader>(
      "UPDATE tournament_results SET points_reason = 'CUP_RUNNER_UP' WHERE points_reason = 'POSITION_2'"
    );
    console.log(
      `‚úÖ POSITION_2 -> CUP_RUNNER_UP: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result2.affectedRows} –∑–∞–ø–∏—Å–µ–π`
    );

    // POSITION_3 -> CUP_THIRD_PLACE
    const [result3] = await pool.execute<ResultSetHeader>(
      "UPDATE tournament_results SET points_reason = 'CUP_THIRD_PLACE' WHERE points_reason = 'POSITION_3'"
    );
    console.log(
      `‚úÖ POSITION_3 -> CUP_THIRD_PLACE: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result3.affectedRows} –∑–∞–ø–∏—Å–µ–π`
    );

    // POSITION_1_2 -> CUP_SEMI_FINAL
    const [result4] = await pool.execute<ResultSetHeader>(
      "UPDATE tournament_results SET points_reason = 'CUP_SEMI_FINAL' WHERE points_reason = 'POSITION_1_2'"
    );
    console.log(
      `‚úÖ POSITION_1_2 -> CUP_SEMI_FINAL: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result4.affectedRows} –∑–∞–ø–∏—Å–µ–π`
    );

    // POSITION_1_4 -> CUP_QUARTER_FINAL
    const [result5] = await pool.execute<ResultSetHeader>(
      "UPDATE tournament_results SET points_reason = 'CUP_QUARTER_FINAL' WHERE points_reason = 'POSITION_1_4'"
    );
    console.log(
      `‚úÖ POSITION_1_4 -> CUP_QUARTER_FINAL: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${result5.affectedRows} –∑–∞–ø–∏—Å–µ–π`
    );

    const totalUpdated =
      result1.affectedRows +
      result2.affectedRows +
      result3.affectedRows +
      result4.affectedRows +
      result5.affectedRows;
    console.log(`‚úÖ –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${totalUpdated}`);

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º enum –≤ —Ç–∞–±–ª–∏—Ü–µ - —É–±–∏—Ä–∞–µ–º POSITION_* –∑–Ω–∞—á–µ–Ω–∏—è
    console.log(
      "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º enum points_reason - —É–±–∏—Ä–∞–µ–º POSITION_* –∑–Ω–∞—á–µ–Ω–∏—è..."
    );
    await pool.execute(`
      ALTER TABLE tournament_results 
      MODIFY COLUMN points_reason ENUM(
        'CUP_WINNER',
        'CUP_RUNNER_UP', 
        'CUP_THIRD_PLACE',
        'CUP_SEMI_FINAL',
        'CUP_QUARTER_FINAL',
        'QUALIFYING_HIGH',
        'QUALIFYING_LOW'
      ) NOT NULL
    `);

    console.log("‚úÖ Enum –æ–±–Ω–æ–≤–ª—ë–Ω - POSITION_* –∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã");

    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const [finalColumns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );
    console.log("üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tournament_results:");
    const pointsReasonColumn = finalColumns.find(
      (col) => col.Field === "points_reason"
    );
    if (pointsReasonColumn) {
      console.log(`  - points_reason: ${pointsReasonColumn.Type}`);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  }
};
