import { pool } from "../config/database";

const simpleMigration = [
  // 1. –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
  `SET FOREIGN_KEY_CHECKS = 0`,

  // 2. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  `DROP TABLE IF EXISTS team_members`,
  `DROP TABLE IF EXISTS teams`,

  // 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É teams
  `CREATE TABLE teams (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tournament_id INT NOT NULL,
    player1_id INT NOT NULL,
    player2_id INT NULL,
    player3_id INT NULL, 
    player4_id INT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    FOREIGN KEY (player1_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (player2_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (player3_id) REFERENCES players(id) ON DELETE CASCADE,
    FOREIGN KEY (player4_id) REFERENCES players(id) ON DELETE CASCADE,
    INDEX idx_tournament (tournament_id),
    INDEX idx_player1 (player1_id),
    INDEX idx_player2 (player2_id),
    INDEX idx_player3 (player3_id),
    INDEX idx_player4 (player4_id),
    INDEX idx_team_players (tournament_id, player1_id, player2_id, player3_id, player4_id)
  )`,

  // 4. –í–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –æ–±—Ä–∞—Ç–Ω–æ
  `SET FOREIGN_KEY_CHECKS = 1`,
];

export const runSimpleTeamsMigration = async () => {
  const connection = await pool.getConnection();
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã teams...");

    await connection.beginTransaction();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –º–∏–≥—Ä–∞—Ü–∏–∏
    for (let i = 0; i < simpleMigration.length; i++) {
      console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ${i + 1}/${simpleMigration.length}...`);
      await connection.execute(simpleMigration[i]);
    }

    await connection.commit();
    console.log("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è teams –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ teams:", error);
    throw error;
  } finally {
    connection.release();
  }
};

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runSimpleTeamsMigration()
    .then(() => {
      console.log("–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
      process.exit(0);
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:", error);
      process.exit(1);
    });
}
