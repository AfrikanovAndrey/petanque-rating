import { pool } from "../config/database";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ points –∏–∑ —Ç–∞–±–ª–∏—Ü—ã tournament_results
 * –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ player_tournament_points
 */
export async function removePointsFromTournamentResults(): Promise<void> {
  const connection = await pool.getConnection();

  try {
    await connection.beginTransaction();
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ points –∏–∑ tournament_results...");

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ player_tournament_points —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const [tableExists] = await connection.execute(`
      SELECT COUNT(*) as count
      FROM information_schema.TABLES
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME = 'player_tournament_points'
    `);

    if ((tableExists as any[])[0].count === 0) {
      throw new Error(
        "–¢–∞–±–ª–∏—Ü–∞ player_tournament_points –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é create-player-tournament-points."
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ–º –∏—Ö –Ω–∞–ª–∏—á–∏—è)
    const [tournamentResultsCount] = await connection.execute(`
      SELECT COUNT(*) as count 
      FROM tournament_results
      WHERE points_reason IS NOT NULL AND points_reason != ''
    `);

    const [playerTournamentPointsCount] = await connection.execute(`
      SELECT COUNT(*) as count FROM player_tournament_points
    `);

    const oldCount = (tournamentResultsCount as any[])[0].count;
    const newCount = (playerTournamentPointsCount as any[])[0].count;

    console.log(`üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:`);
    console.log(`   - –ó–∞–ø–∏—Å–µ–π –≤ tournament_results: ${oldCount}`);
    console.log(`   - –ó–∞–ø–∏—Å–µ–π –≤ player_tournament_points: ${newCount}`);
    console.log(
      `   - –¢–∞–±–ª–∏—Ü–∞ player_tournament_points –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–∞, –µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä—ã –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å`
    );

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞ points
    const [columnCheck] = await connection.execute(`
      SELECT COUNT(*) as count
      FROM information_schema.COLUMNS
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME = 'tournament_results'
      AND COLUMN_NAME = 'points'
    `);

    const hasPointsColumn = (columnCheck as any[])[0].count > 0;

    if (!hasPointsColumn) {
      console.log("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ points –≤ tournament_results —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      await connection.commit();
      return;
    }

    // 3. –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É points –∏–∑ tournament_results
    console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É points –∏–∑ tournament_results...");

    await connection.execute(`
      ALTER TABLE tournament_results DROP COLUMN points
    `);

    console.log("‚úì –ö–æ–ª–æ–Ω–∫–∞ points —É–¥–∞–ª–µ–Ω–∞ –∏–∑ tournament_results");

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–æ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞
    const [finalCheck] = await connection.execute(`
      SELECT COUNT(*) as count
      FROM information_schema.COLUMNS
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME = 'tournament_results'
      AND COLUMN_NAME = 'points'
    `);

    if ((finalCheck as any[])[0].count > 0) {
      throw new Error(
        "–û—à–∏–±–∫–∞: –∫–æ–ª–æ–Ω–∫–∞ points –Ω–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ tournament_results"
      );
    }

    console.log("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ points —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ tournament_results");

    await connection.commit();
    console.log(
      "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è points –∏–∑ tournament_results –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    );
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  } finally {
    connection.release();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ migrate.ts
export { removePointsFromTournamentResults as migrate };
