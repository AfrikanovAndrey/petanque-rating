import { pool } from "../config/database";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ team_players –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª–µ–π player1_id, player2_id, player3_id, player4_id –∏–∑ teams
 */
export async function restructureTeamsFinal(): Promise<void> {
  const connection = await pool.getConnection();

  try {
    await connection.beginTransaction();
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥...");

    // 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É team_players –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS team_players (
        id INT AUTO_INCREMENT PRIMARY KEY,
        team_id INT NOT NULL,
        player_id INT NOT NULL,
        position TINYINT NOT NULL DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE,
        FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
        UNIQUE KEY unique_team_player (team_id, player_id),
        KEY idx_team_id (team_id),
        KEY idx_player_id (player_id)
      )
    `);
    console.log("‚úì –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ team_players");

    // 2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã teams –≤ team_players
    const [existingTeams] = await connection.execute(`
      SELECT id, player1_id, player2_id, player3_id, player4_id 
      FROM teams 
      WHERE player1_id IS NOT NULL
    `);

    let migratedTeams = 0;
    let migratedPlayers = 0;

    for (const team of existingTeams as any[]) {
      const playerIds = [
        team.player1_id,
        team.player2_id,
        team.player3_id,
        team.player4_id,
      ].filter((id) => id !== null);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤ team_players
      const [existingRecords] = await connection.execute(
        `SELECT COUNT(*) as count FROM team_players WHERE team_id = ?`,
        [team.id]
      );

      if ((existingRecords as any[])[0].count === 0) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ team_players
        for (let i = 0; i < playerIds.length; i++) {
          await connection.execute(
            `INSERT INTO team_players (team_id, player_id, position) VALUES (?, ?, ?)`,
            [team.id, playerIds[i], i + 1]
          );
          migratedPlayers++;
        }
        migratedTeams++;
      }
    }

    console.log(
      `‚úì –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${migratedTeams} –∫–æ–º–∞–Ω–¥ –∏ ${migratedPlayers} —Å–≤—è–∑–µ–π –∏–≥—Ä–æ–∫-–∫–æ–º–∞–Ω–¥–∞`
    );

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    const [oldTeamsCount] = await connection.execute(`
      SELECT COUNT(*) as count FROM teams WHERE player1_id IS NOT NULL
    `);

    const [newTeamsCount] = await connection.execute(`
      SELECT COUNT(DISTINCT team_id) as count FROM team_players
    `);

    const oldCount = (oldTeamsCount as any[])[0].count;
    const newCount = (newTeamsCount as any[])[0].count;

    if (oldCount !== newCount) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (—Å—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${oldCount}, –Ω–æ–≤–∞—è: ${newCount})`
      );
    }

    console.log(
      `‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞: ${newCount} –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`
    );

    // 4. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –∏ –∫–æ–ª–æ–Ω–∫–∏
    try {
      // –£–¥–∞–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
      const [foreignKeys] = await connection.execute(`
        SELECT CONSTRAINT_NAME 
        FROM information_schema.KEY_COLUMN_USAGE 
        WHERE TABLE_SCHEMA = DATABASE() 
        AND TABLE_NAME = 'teams' 
        AND COLUMN_NAME IN ('player1_id', 'player2_id', 'player3_id', 'player4_id')
        AND REFERENCED_TABLE_NAME = 'players'
      `);

      for (const key of foreignKeys as any[]) {
        await connection.execute(
          `ALTER TABLE teams DROP FOREIGN KEY ${key.CONSTRAINT_NAME}`
        );
        console.log(`‚úì –£–¥–∞–ª–µ–Ω –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á: ${key.CONSTRAINT_NAME}`);
      }
    } catch (error) {
      console.log("‚ÑπÔ∏è –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω—ã");
    }

    // –£–¥–∞–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
    const columnsToRemove = [
      "player1_id",
      "player2_id",
      "player3_id",
      "player4_id",
    ];
    for (const column of columnsToRemove) {
      try {
        await connection.execute(`ALTER TABLE teams DROP COLUMN ${column}`);
        console.log(`‚úì –£–¥–∞–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: ${column}`);
      } catch (error) {
        console.log(`‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ ${column} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞`);
      }
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const [finalCheck] = await connection.execute(`
      SELECT 
        (SELECT COUNT(*) FROM teams) as teams_count,
        (SELECT COUNT(DISTINCT team_id) FROM team_players) as team_players_count,
        (SELECT COUNT(*) FROM team_players) as total_players_in_teams
    `);

    const stats = (finalCheck as any[])[0];
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:`);
    console.log(`   - –ö–æ–º–∞–Ω–¥ –≤ teams: ${stats.teams_count}`);
    console.log(`   - –ö–æ–º–∞–Ω–¥ –≤ team_players: ${stats.team_players_count}`);
    console.log(
      `   - –í—Å–µ–≥–æ —Å–≤—è–∑–µ–π –∏–≥—Ä–æ–∫-–∫–æ–º–∞–Ω–¥–∞: ${stats.total_players_in_teams}`
    );

    await connection.commit();
    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–∞–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  } finally {
    connection.release();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ migrate.ts
export { restructureTeamsFinal as migrate };
