import { pool } from "../config/database";
import { RowDataPacket, ResultSetHeader } from "mysql2";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü licensed_players –∏ players
 * –£–±–∏—Ä–∞–µ—Ç –ø–æ–ª–µ full_name –∏–∑ licensed_players –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤—è–∑—å —á–µ—Ä–µ–∑ player_id
 */
export async function linkLicensedPlayersWithPlayers(): Promise<void> {
  const connection = await pool.getConnection();

  try {
    await connection.beginTransaction();
    console.log(
      "üîó –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–≤—è–∑—ã–≤–∞–Ω–∏—è licensed_players —Å players..."
    );

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª–µ player_id
    const [columnCheck] = await connection.execute(`
      SELECT COUNT(*) as count
      FROM information_schema.COLUMNS
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME = 'licensed_players'
      AND COLUMN_NAME = 'player_id'
    `);

    const hasPlayerIdColumn = (columnCheck as any[])[0].count > 0;

    if (hasPlayerIdColumn) {
      console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ - –ø–æ–ª–µ player_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      await connection.commit();
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ full_name –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const [fullNameCheck] = await connection.execute(`
      SELECT COUNT(*) as count
      FROM information_schema.COLUMNS
      WHERE TABLE_SCHEMA = DATABASE()
      AND TABLE_NAME = 'licensed_players'
      AND COLUMN_NAME = 'full_name'
    `);

    const hasFullNameColumn = (fullNameCheck as any[])[0].count > 0;

    if (!hasFullNameColumn) {
      console.log("‚ùå –ü–æ–ª–µ full_name –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ licensed_players");
      throw new Error(
        "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ full_name"
      );
    }

    // 3. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ licensed_players
    const [licensedPlayers] = await connection.execute<RowDataPacket[]>(`
      SELECT id, full_name, license_number, city, license_date, year, is_active
      FROM licensed_players
    `);

    console.log(
      `üìä –ù–∞–π–¥–µ–Ω–æ ${licensedPlayers.length} –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏`
    );

    // 4. –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ player_id –≤ licensed_players
    console.log("üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ player_id...");
    await connection.execute(`
      ALTER TABLE licensed_players 
      ADD COLUMN player_id INT NULL
      AFTER id
    `);

    let createdPlayers = 0;
    let linkedPlayers = 0;

    // 5. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º –∏–≥—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ players
    for (const licensedPlayer of licensedPlayers) {
      let playerId: number;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
      const [existingPlayer] = await connection.execute<RowDataPacket[]>(
        "SELECT id FROM players WHERE name = ?",
        [licensedPlayer.full_name]
      );

      if (existingPlayer.length > 0) {
        // –ò–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        playerId = existingPlayer[0].id;
        console.log(
          `üë§ –ò–≥—Ä–æ–∫ "${licensedPlayer.full_name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: ${playerId})`
        );
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        const [insertResult] = await connection.execute<ResultSetHeader>(
          "INSERT INTO players (name) VALUES (?)",
          [licensedPlayer.full_name]
        );
        playerId = insertResult.insertId;
        createdPlayers++;
        console.log(
          `‚ûï –°–æ–∑–¥–∞–Ω –∏–≥—Ä–æ–∫ "${licensedPlayer.full_name}" (ID: ${playerId})`
        );
      }

      // –°–≤—è–∑—ã–≤–∞–µ–º –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å –∏–≥—Ä–æ–∫–æ–º
      await connection.execute(
        "UPDATE licensed_players SET player_id = ? WHERE id = ?",
        [playerId, licensedPlayer.id]
      );
      linkedPlayers++;
    }

    // 6. –î–µ–ª–∞–µ–º –ø–æ–ª–µ player_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º
    console.log("üîß –î–µ–ª–∞–µ–º –ø–æ–ª–µ player_id –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º...");
    await connection.execute(`
      ALTER TABLE licensed_players 
      MODIFY COLUMN player_id INT NOT NULL
    `);

    // 7. –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –∏ –∏–Ω–¥–µ–∫—Å—ã
    console.log("üîó –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á –∏ –∏–Ω–¥–µ–∫—Å—ã...");
    await connection.execute(`
      ALTER TABLE licensed_players 
      ADD CONSTRAINT fk_licensed_players_player_id 
      FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE
    `);

    await connection.execute(`
      ALTER TABLE licensed_players 
      ADD INDEX idx_player_id (player_id)
    `);

    // 8. –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞ –≤ –æ–¥–Ω–æ–º –≥–æ–¥—É
    await connection.execute(`
      ALTER TABLE licensed_players 
      ADD UNIQUE KEY unique_player_year (player_id, year)
    `);

    // 9. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ full_name –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å
    console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª–µ full_name...");

    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      await connection.execute(`
        ALTER TABLE licensed_players 
        DROP INDEX idx_full_name
      `);
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      console.log("‚ÑπÔ∏è –ò–Ω–¥–µ–∫—Å idx_full_name –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω");
    }

    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –ø–æ–ª–µ
    await connection.execute(`
      ALTER TABLE licensed_players 
      DROP COLUMN full_name
    `);

    await connection.commit();

    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è licensed_players —Å players –∑–∞–≤–µ—Ä—à–µ–Ω–∞:");
    console.log(`   üë• –ò–≥—Ä–æ–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: ${createdPlayers}`);
    console.log(`   üîó –°–≤—è–∑–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${linkedPlayers}`);
    console.log(`   üóëÔ∏è –ü–æ–ª–µ full_name —É–¥–∞–ª–µ–Ω–æ`);
    console.log(`   ‚ú® –î–æ–±–∞–≤–ª–µ–Ω—ã –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –∏ –∏–Ω–¥–µ–∫—Å—ã`);

    // 10. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const [stats] = await connection.execute<RowDataPacket[]>(`
      SELECT 
        COUNT(DISTINCT lp.player_id) as unique_players,
        COUNT(*) as total_licenses,
        MIN(lp.year) as earliest_year,
        MAX(lp.year) as latest_year
      FROM licensed_players lp
    `);

    const statistics = stats[0];
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:`);
    console.log(`   üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${statistics.unique_players}`);
    console.log(`   üìÑ –í—Å–µ–≥–æ –ª–∏—Ü–µ–Ω–∑–∏–π: ${statistics.total_licenses}`);
    console.log(
      `   üìÖ –ì–æ–¥—ã –ª–∏—Ü–µ–Ω–∑–∏–π: ${statistics.earliest_year} - ${statistics.latest_year}`
    );
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  } finally {
    connection.release();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ migrate.ts
export { linkLicensedPlayersWithPlayers as migrate };
