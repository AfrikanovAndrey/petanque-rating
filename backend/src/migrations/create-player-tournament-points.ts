import { pool } from "../config/database";
import { getCupPoints, getPointsByQualifyingStage } from "../config/cupPoints";
import { CupPosition } from "../types";

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã player_tournament_points
 * –•—Ä–∞–Ω–∏—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
 * –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: id | tournament_id | player_id | points
 */
export async function createPlayerTournamentPoints(): Promise<void> {
  const connection = await pool.getConnection();

  try {
    await connection.beginTransaction();
    console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã player_tournament_points...");

    // 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ —Ç—É—Ä–Ω–∏—Ä—ã
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS player_tournament_points (
        id INT AUTO_INCREMENT PRIMARY KEY,
        tournament_id INT NOT NULL,
        player_id INT NOT NULL,
        points INT NOT NULL DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
        FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
        UNIQUE KEY unique_player_tournament (player_id, tournament_id),
        INDEX idx_player_points (player_id, points DESC),
        INDEX idx_tournament (tournament_id),
        INDEX idx_points (points DESC),
        INDEX idx_player_tournament_points (player_id, tournament_id, points),
        INDEX idx_tournament_created (tournament_id, created_at)
      )
    `);
    console.log("‚úì –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ player_tournament_points");

    // 2. –ü–µ—Ä–µ–Ω–æ—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ tournament_results –≤ –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    console.log("üîÑ –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ tournament_results...");

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
    const [tournamentResults] = await connection.execute(`
      SELECT 
        tr.tournament_id,
        tr.cup_position,
        tr.cup,
        tr.qualifying_wins,
        tp.player_id
      FROM tournament_results tr
      JOIN team_players tp ON tr.team_id = tp.team_id
      WHERE tr.cup_position IS NOT NULL AND tr.cup_position != ''
      ORDER BY tr.tournament_id, tp.player_id
    `);

    let migratedRecords = 0;

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å –æ—á–∫–∞–º–∏
    for (const result of tournamentResults as any[]) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
      const [existing] = await connection.execute(
        `SELECT COUNT(*) as count 
         FROM player_tournament_points 
         WHERE player_id = ? AND tournament_id = ?`,
        [result.player_id, result.tournament_id]
      );

      if ((existing as any[])[0].count === 0) {
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ cup_position, cup –∏ qualifying_wins
        let points = 0;

        // –û—á–∫–∏ –∑–∞ –∫—É–±–æ–∫
        if (result.cup_position && result.cup_position !== "QUALIFYING_ONLY") {
          const cupPosition = result.cup_position as CupPosition;
          points += getCupPoints(
            "2", // –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 2-—è
            result.cup || "A",
            cupPosition,
            20 // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          );
        }

        // –û—á–∫–∏ –∑–∞ –æ—Ç–±–æ—Ä–æ—á–Ω—ã–µ –ø–æ–±–µ–¥—ã
        if (result.qualifying_wins > 0) {
          points += getPointsByQualifyingStage("2", result.qualifying_wins);
        }

        if (points > 0) {
          await connection.execute(
            `INSERT INTO player_tournament_points 
             (tournament_id, player_id, points)
             VALUES (?, ?, ?)`,
            [result.tournament_id, result.player_id, points]
          );
          migratedRecords++;
        }
      }
    }

    console.log(
      `‚úì –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${migratedRecords} –∑–∞–ø–∏—Å–µ–π —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤`
    );

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
    const [oldCount] = await connection.execute(`
      SELECT COUNT(*) as count 
      FROM tournament_results tr
      JOIN team_players tp ON tr.team_id = tp.team_id
      WHERE tr.cup_position IS NOT NULL AND tr.cup_position != ''
    `);

    const [newCount] = await connection.execute(`
      SELECT COUNT(*) as count FROM player_tournament_points
    `);

    const oldRecords = (oldCount as any[])[0].count;
    const newRecords = (newCount as any[])[0].count;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ –º–µ–Ω—å—à–µ —á–µ–º –æ–∂–∏–¥–∞–µ—Ç—Å—è
    // (–≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –∑–∞–ø–∏—Å–µ–π –∏–∑-–∑–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –æ—á–∫–æ–≤ –∏–≥—Ä–æ–∫–æ–≤)
    if (newRecords < migratedRecords) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–æ–∂–∏–¥–∞–ª–æ—Å—å: ${migratedRecords}, –ø–æ–ª—É—á–µ–Ω–æ: ${newRecords})`
      );
    }

    console.log(
      `‚úì –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞: ${newRecords} –∑–∞–ø–∏—Å–µ–π –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ (–±—ã–ª–æ ${oldRecords} —Å–≤—è–∑–µ–π –∫–æ–º–∞–Ω–¥–∞-–∏–≥—Ä–æ–∫, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ ${migratedRecords} –∑–∞–ø–∏—Å–µ–π)`
    );

    // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const [stats] = await connection.execute(`
      SELECT 
        COUNT(DISTINCT player_id) as players_count,
        COUNT(DISTINCT tournament_id) as tournaments_count,
        COUNT(*) as total_records,
        SUM(points) as total_points
      FROM player_tournament_points
    `);

    const statistics = (stats as any[])[0];
    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã player_tournament_points:`);
    console.log(`   - –ò–≥—Ä–æ–∫–æ–≤: ${statistics.players_count}`);
    console.log(`   - –¢—É—Ä–Ω–∏—Ä–æ–≤: ${statistics.tournaments_count}`);
    console.log(`   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${statistics.total_records}`);
    console.log(`   - –û–±—â–∞—è —Å—É–º–º–∞ –æ—á–∫–æ–≤: ${statistics.total_points}`);

    await connection.commit();
    console.log(
      "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã player_tournament_points –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    );
  } catch (error) {
    await connection.rollback();
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  } finally {
    connection.release();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ migrate.ts
export { createPlayerTournamentPoints as migrate };
