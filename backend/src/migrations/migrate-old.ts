import { pool } from "../config/database";
import { checkAndFixCupPositionColumn } from "./fix-cup-position";
import { runTeamsMigrations } from "./add-teams";
import { runAddWinsColumnMigration } from "./add-wins-column";
import { renameCupPositionToPointsReason } from "./rename-cup-position-to-points-reason";
import { removePositionEnumDuplicates } from "./remove-position-enum-duplicates";
import { renameWinsToQualifyingWins } from "./rename-wins-to-qualifying-wins";
import { addWinsLosesColumns } from "./add-wins-loses-columns";
import { createPlayerTournamentPoints } from "./create-player-tournament-points";
import { removePointsFromTournamentResults } from "./remove-points-from-tournament-results";
import { addGenderColumn } from "./add-gender-column";
import { populateGender } from "./populate-gender";
import { updateGender } from "./update-gender";

const migrations = [
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–≥—Ä–æ–∫–æ–≤
  `CREATE TABLE IF NOT EXISTS players (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_name (name)
  )`,

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤
  `CREATE TABLE IF NOT EXISTS tournaments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    date DATE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_date (date)
  )`,

  // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
  `CREATE TABLE IF NOT EXISTS tournament_results (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tournament_id INT NOT NULL,
    player_id INT NOT NULL,
    cup_position VARCHAR(10) NOT NULL,
    points INT NOT NULL DEFAULT 0,
    cup ENUM('A', 'B') NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (tournament_id) REFERENCES tournaments(id) ON DELETE CASCADE,
    FOREIGN KEY (player_id) REFERENCES players(id) ON DELETE CASCADE,
    INDEX idx_tournament_player (tournament_id, player_id),
    INDEX idx_tournament_cup (tournament_id, cup),
    INDEX idx_points (points DESC),
    INDEX idx_cup_position (cup_position)
  )`,

  // 4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞
  `CREATE TABLE IF NOT EXISTS rating_settings (
    id INT AUTO_INCREMENT PRIMARY KEY,
    setting_name VARCHAR(50) NOT NULL UNIQUE,
    setting_value TEXT NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  )`,

  // 6. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  `CREATE TABLE IF NOT EXISTS admins (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
  )`,

  // 7. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  `CREATE TABLE IF NOT EXISTS licensed_players (
    id INT AUTO_INCREMENT PRIMARY KEY,
    license_number VARCHAR(20) NOT NULL UNIQUE,
    full_name VARCHAR(255) NOT NULL,
    city VARCHAR(100) NOT NULL,
    license_date DATE NOT NULL,
    year INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_license_number (license_number),
    INDEX idx_year_active (year, is_active),
    INDEX idx_full_name (full_name)
  )`,
];

const seedData = [
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  `INSERT IGNORE INTO rating_settings (setting_name, setting_value, description) VALUES 
    ('best_results_count', '8', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞'),
    ('current_season', '2025', '–¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω')`,
];

export const runMigrations = async () => {
  try {
    console.log("üöÄ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π...");

    for (let i = 0; i < migrations.length; i++) {
      console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ ${i + 1}/${migrations.length}...`);
      await pool.execute(migrations[i]);
    }

    // console.log("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...");
    // await checkAndFixCupPositionColumn(); // –û—Ç–∫–ª—é—á–µ–Ω–æ - –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ points_reason –º–∏–≥—Ä–∞—Ü–∏—é

    console.log("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è wins –≤ —Ç–∞–±–ª–∏—Ü—É tournament_results...");
    await runAddWinsColumnMigration();

    console.log("üîß –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ cup_position –≤ points_reason...");
    await renameCupPositionToPointsReason();

    console.log("üîß –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è POSITION_* –∑–Ω–∞—á–µ–Ω–∏–π –≤ enum...");
    await removePositionEnumDuplicates();

    console.log("üîß –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ wins –≤ qualifying_wins...");
    await renameWinsToQualifyingWins();

    console.log("üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ wins –∏ loses...");
    await addWinsLosesColumns();

    console.log("üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã player_tournament_points...");
    await createPlayerTournamentPoints();

    console.log("üîß –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ points –∏–∑ tournament_results...");
    await removePointsFromTournamentResults();

    console.log("üöª –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è gender –≤ —Ç–∞–±–ª–∏—Ü—É players...");
    await addGenderColumn();

    console.log("üöª –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...");
    await populateGender();

    console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –∏–≥—Ä–æ–∫–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º...");
    await updateGender();

    console.log("üå± –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
    for (const seed of seedData) {
      await pool.execute(seed);
    }

    // –ú–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    // console.log("üèÜ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫–æ–º–∞–Ω–¥...");
    // await runTeamsMigrations();

    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π:", error);
    throw error;
  }
};

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runMigrations()
    .then(() => {
      console.log("–ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã");
      process.exit(0);
    })
    .catch((error) => {
      console.error("–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π:", error);
      process.exit(1);
    });
}
