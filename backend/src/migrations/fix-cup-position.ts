import { pool } from "../config/database";
import { RowDataPacket } from "mysql2";

interface TableColumn extends RowDataPacket {
  Field: string;
  Type: string;
  Null: string;
  Key: string;
  Default: string | null;
  Extra: string;
}

const checkAndFixCupPositionColumn = async () => {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã tournament_results...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ cup_position
    const [columns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );

    console.log("üìã –¢–µ–∫—É—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã tournament_results:");
    columns.forEach((col) => {
      console.log(
        `  - ${col.Field}: ${col.Type} ${
          col.Null === "NO" ? "NOT NULL" : "NULL"
        }`
      );
    });

    const hasCupPositionColumn = columns.some(
      (col) => col.Field === "cup_position"
    );

    if (!hasCupPositionColumn) {
      console.log("‚ùå –°—Ç–æ–ª–±–µ—Ü cup_position –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª—è–µ–º...");

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü cup_position
      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD COLUMN cup_position VARCHAR(10) NOT NULL DEFAULT '0' AFTER player_id
      `);

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è cup_position
      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD INDEX idx_cup_position (cup_position)
      `);

      console.log("‚úÖ –°—Ç–æ–ª–±–µ—Ü cup_position —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
    } else {
      console.log("‚úÖ –°—Ç–æ–ª–±–µ—Ü cup_position —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–æ–ª–±—Ü–∞ cup
    const hasCupColumn = columns.some((col) => col.Field === "cup");
    if (!hasCupColumn) {
      console.log("‚ùå –°—Ç–æ–ª–±–µ—Ü cup –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –î–æ–±–∞–≤–ª—è–µ–º...");

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü cup
      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD COLUMN cup ENUM('A', 'B') NULL AFTER cup_position
      `);

      console.log("‚úÖ –°—Ç–æ–ª–±–µ—Ü cup —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω");
    } else {
      console.log("‚úÖ –°—Ç–æ–ª–±–µ—Ü cup —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—à–Ω–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ position
    const hasPositionColumn = columns.some((col) => col.Field === "position");
    if (hasPositionColumn) {
      console.log("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Å—Ç–æ–ª–±–µ—Ü position. –£–¥–∞–ª—è–µ–º...");

      // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü position
      await pool.execute(`
        ALTER TABLE tournament_results 
        DROP COLUMN position
      `);

      console.log("‚úÖ –°—Ç–æ–ª–±–µ—Ü position —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω");
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const [finalColumns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );
    console.log("üìã –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:");
    finalColumns.forEach((col) => {
      console.log(
        `  - ${col.Field}: ${col.Type} ${
          col.Null === "NO" ? "NOT NULL" : "NULL"
        }`
      );
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ
    const [results] = await pool.execute<RowDataPacket[]>(
      "SELECT COUNT(*) as count FROM tournament_results"
    );
    console.log(
      `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ tournament_results: ${results[0].count}`
    );
  } catch (error) {
    console.error(
      "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:",
      error
    );
    throw error;
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  checkAndFixCupPositionColumn()
    .then(() => {
      console.log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå –û—à–∏–±–∫–∞:", error);
      process.exit(1);
    });
}

export { checkAndFixCupPositionColumn };
