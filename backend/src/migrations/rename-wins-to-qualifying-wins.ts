import { pool } from "../config/database";
import { RowDataPacket, ResultSetHeader } from "mysql2";

interface TableColumn extends RowDataPacket {
  Field: string;
  Type: string;
  Null: string;
  Key: string;
  Default: string | null;
  Extra: string;
}

export const renameWinsToQualifyingWins = async () => {
  try {
    console.log(
      "üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è: –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ wins –≤ qualifying_wins..."
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    const [columns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );

    const hasWins = columns.some((col) => col.Field === "wins");
    const hasQualifyingWins = columns.some(
      (col) => col.Field === "qualifying_wins"
    );

    if (!hasWins && hasQualifyingWins) {
      console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
      return;
    }

    if (!hasWins) {
      console.log("‚ùå –°—Ç–æ–ª–±–µ—Ü wins –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    if (hasQualifyingWins) {
      console.log("‚ùå –°—Ç–æ–ª–±–µ—Ü qualifying_wins —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      return;
    }

    // 1. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü wins –≤ qualifying_wins
    console.log("üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü wins –≤ qualifying_wins...");
    await pool.execute(`
      ALTER TABLE tournament_results 
      CHANGE COLUMN wins qualifying_wins INT DEFAULT 0
    `);

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    try {
      console.log("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω–¥–µ–∫—Å idx_wins –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç...");
      await pool.execute(`
        ALTER TABLE tournament_results 
        DROP INDEX IF EXISTS idx_wins
      `);
    } catch (error: any) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      console.log("‚úÖ –ò–Ω–¥–µ–∫—Å idx_wins –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª");
    }

    try {
      console.log("üìä –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å idx_qualifying_wins...");
      await pool.execute(`
        ALTER TABLE tournament_results 
        ADD INDEX idx_qualifying_wins (qualifying_wins)
      `);
    } catch (error: any) {
      if (error.code === "ER_DUP_KEYNAME") {
        console.log("‚úÖ –ò–Ω–¥–µ–∫—Å idx_qualifying_wins —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      } else {
        throw error;
      }
    }

    console.log("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const [finalColumns] = await pool.execute<TableColumn[]>(
      "DESCRIBE tournament_results"
    );
    console.log("üìã –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã tournament_results:");
    const qualifyingWinsColumn = finalColumns.find(
      (col) => col.Field === "qualifying_wins"
    );
    if (qualifyingWinsColumn) {
      console.log(
        `  - qualifying_wins: ${qualifyingWinsColumn.Type} ${
          qualifyingWinsColumn.Null === "NO" ? "NOT NULL" : "NULL"
        } DEFAULT ${qualifyingWinsColumn.Default}`
      );
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", error);
    throw error;
  }
};
