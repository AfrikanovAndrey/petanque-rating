import { google, sheets_v4 } from "googleapis";
import * as XLSX from "xlsx";
import * as dotenv from "dotenv";

dotenv.config();

export class GoogleSheetsService {
  private static sheets: sheets_v4.Sheets | null = null;
  private static apiKey = process.env.GOOGLE_SHEETS_API_KEY;

  /**
   * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ API –∫–ª—é—á–∞
   */
  static debugApiKey(): void {
    console.log("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Google Sheets API:");
    console.log(`  - API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: ${this.apiKey ? "–î–ê" : "–ù–ï–¢"}`);
    console.log(
      `  - –î–ª–∏–Ω–∞ –∫–ª—é—á–∞: ${this.apiKey ? this.apiKey.length : 0} —Å–∏–º–≤–æ–ª–æ–≤`
    );
    console.log(
      `  - –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å AIza: ${this.apiKey?.startsWith("AIza") ? "–î–ê" : "–ù–ï–¢"}`
    );
    console.log(`  - NODE_ENV: ${process.env.NODE_ENV}`);
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API
   */
  private static getSheets(): sheets_v4.Sheets {
    if (!this.sheets) {
      if (!this.apiKey) {
        throw new Error(
          "Google Sheets API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ GOOGLE_SHEETS_API_KEY –≤ —Ñ–∞–π–ª .env"
        );
      }

      this.sheets = google.sheets({
        version: "v4",
        auth: this.apiKey,
      });
    }
    return this.sheets;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã –∏–∑ URL Google Sheets
   */
  static extractSheetId(url: string): string {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã URLs:
    // https://docs.google.com/spreadsheets/d/SHEET_ID/edit#gid=0
    // https://docs.google.com/spreadsheets/d/SHEET_ID/edit
    // https://docs.google.com/spreadsheets/d/SHEET_ID
    const patterns = [
      /\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/,
      /spreadsheets\/d\/([a-zA-Z0-9-_]+)/,
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match && match[1]) {
        return match[1];
      }
    }

    throw new Error(
      "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL Google Sheets. –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: https://docs.google.com/spreadsheets/d/SHEET_ID/..."
    );
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è URL Google Sheets
   */
  static validateGoogleSheetsUrl(url: string): boolean {
    try {
      this.extractSheetId(url);
      return true;
    } catch {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ
   */
  static async getSheetNames(spreadsheetId: string): Promise<string[]> {
    try {
      const sheets = this.getSheets();
      const response = await sheets.spreadsheets.get({
        spreadsheetId,
        fields: "sheets.properties.title",
      });

      const sheetNames =
        response.data.sheets?.map(
          (sheet) => sheet.properties?.title || "Untitled"
        ) || [];

      console.log(`–ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã –≤ Google —Ç–∞–±–ª–∏—Ü–µ: ${sheetNames.join(", ")}`);
      return sheetNames;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ª–∏—Å—Ç–æ–≤:", error);
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Google —Ç–∞–±–ª–∏—Ü–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –ø—É–±–ª–∏—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è: ${
          (error as Error).message
        }`
      );
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
   */
  static async getSheetData(
    spreadsheetId: string,
    sheetName: string,
    range?: string
  ): Promise<any[][]> {
    try {
      const sheets = this.getSheets();
      const fullRange = range ? `${sheetName}!${range}` : sheetName;

      console.log(`–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞: ${fullRange}`);

      const response = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: fullRange,
        valueRenderOption: "UNFORMATTED_VALUE",
        dateTimeRenderOption: "FORMATTED_STRING",
      });

      const values = response.data.values || [];
      console.log(
        `–ü–æ–ª—É—á–µ–Ω–æ ${values.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ "${sheetName}"`
      );

      return values;
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ª–∏—Å—Ç–∞ "${sheetName}":`,
        error
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞ "${sheetName}": ${
          (error as Error).message
        }`
      );
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Google Sheets –≤ —Ñ–æ—Ä–º–∞—Ç, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å XLSX.WorkBook
   */
  static async convertToWorkbook(
    spreadsheetId: string
  ): Promise<XLSX.WorkBook> {
    try {
      console.log(
        `–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é Google —Ç–∞–±–ª–∏—Ü—ã ${spreadsheetId} –≤ XLSX Workbook`
      );

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
      const sheetNames = await this.getSheetNames(spreadsheetId);

      if (sheetNames.length === 0) {
        throw new Error("–í Google —Ç–∞–±–ª–∏—Ü–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∏—Å—Ç–∞");
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π workbook
      const workbook: XLSX.WorkBook = {
        SheetNames: sheetNames,
        Sheets: {},
      };

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
      for (const sheetName of sheetNames) {
        try {
          console.log(`–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: "${sheetName}"`);
          const sheetData = await this.getSheetData(spreadsheetId, sheetName);

          // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ worksheet
          const worksheet = XLSX.utils.aoa_to_sheet(sheetData);
          workbook.Sheets[sheetName] = worksheet;

          console.log(
            `‚úì –õ–∏—Å—Ç "${sheetName}" —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (${sheetData.length} —Å—Ç—Ä–æ–∫)`
          );
        } catch (error) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–∏—Å—Ç "${sheetName}":`, error);
          // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π worksheet –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
          workbook.Sheets[sheetName] = XLSX.utils.aoa_to_sheet([]);
        }
      }

      console.log(
        `‚úÖ Google —Ç–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ XLSX Workbook. –õ–∏—Å—Ç–æ–≤: ${
          Object.keys(workbook.Sheets).length
        }`
      );
      return workbook;
    } catch (error) {
      console.error(
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Google —Ç–∞–±–ª–∏—Ü—ã:",
        error
      );
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Google —Ç–∞–±–ª–∏—Ü—É: ${(error as Error).message}`
      );
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google —Ç–∞–±–ª–∏—Ü—ã
   */
  static async checkTableAccess(url: string): Promise<{
    accessible: boolean;
    spreadsheetId: string;
    sheetNames: string[];
    error?: string;
  }> {
    try {
      const spreadsheetId = this.extractSheetId(url);
      const sheetNames = await this.getSheetNames(spreadsheetId);

      return {
        accessible: true,
        spreadsheetId,
        sheetNames,
      };
    } catch (error) {
      return {
        accessible: false,
        spreadsheetId: "",
        sheetNames: [],
        error: (error as Error).message,
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets –≤ –≤–∏–¥–µ buffer (–∫–∞–∫ –µ—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª XLSX —Ñ–∞–π–ª)
   */
  static async getTournamentDataAsBuffer(url: string): Promise<{
    workbook: XLSX.WorkBook;
    fileName: string;
  }> {
    try {
      console.log(`–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets: ${url}`);

      const spreadsheetId = this.extractSheetId(url);
      const workbook = await this.convertToWorkbook(spreadsheetId);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Ç–∞–±–ª–∏—Ü—ã
      const fileName = `GoogleSheets_${spreadsheetId}.xlsx`;

      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Google Sheets`);

      return {
        workbook,
        fileName,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets:", error);
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã: ${
          (error as Error).message
        }`
      );
    }
  }
}
