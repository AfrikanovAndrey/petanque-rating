import { Cup, CupPosition, TournamentCategoryEnum } from "../types";

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ –∑–∞ –∫—É–±–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞–±–ª–∏—Ü–µ –†–§–ü
// –ö–ª—é—á: "category-cup_type-teams_range"
// –ó–Ω–∞—á–µ–Ω–∏–µ: Map<–ø–æ–∑–∏—Ü–∏—è, –æ—á–∫–∏>

type TeamsRange = "8-12" | "13-18" | "19-24" | "25-30" | "31-36" | "36+";
type CupPointsKey = `${TournamentCategoryEnum}-${string}-${TeamsRange}`;

export const CUP_POINTS: Map<CupPointsKey, Map<CupPosition, number>> = new Map([
  // –¢–£–†–ù–ò–†–´ 1 –ö–ê–¢–ï–ì–û–†–ò–ò

  // –ö—É–±–æ–∫ A, 8-12 –∫–æ–º–∞–Ω–¥
  [
    "1-A-8-12",
    new Map([
      [CupPosition.WINNER, 10], // –ü
      [CupPosition.RUNNER_UP, 8], // –§
      [CupPosition.SEMI_FINAL, 6], // 1/2
      [CupPosition.QUARTER_FINAL, 5], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, 13-18 –∫–æ–º–∞–Ω–¥
  [
    "1-A-13-18",
    new Map([
      [CupPosition.WINNER, 11], // –ü
      [CupPosition.RUNNER_UP, 9], // –§
      [CupPosition.SEMI_FINAL, 7], // 1/2
      [CupPosition.QUARTER_FINAL, 6], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, 19-24 –∫–æ–º–∞–Ω–¥—ã
  [
    "1-A-19-24",
    new Map([
      [CupPosition.WINNER, 12], // –ü
      [CupPosition.RUNNER_UP, 10], // –§
      [CupPosition.SEMI_FINAL, 8], // 1/2
      [CupPosition.QUARTER_FINAL, 7], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, 25-30 –∫–æ–º–∞–Ω–¥
  [
    "1-A-25-30",
    new Map([
      [CupPosition.WINNER, 13], // –ü
      [CupPosition.RUNNER_UP, 11], // –§
      [CupPosition.SEMI_FINAL, 9], // 1/2
      [CupPosition.QUARTER_FINAL, 8], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, 31-36 –∫–æ–º–∞–Ω–¥
  [
    "1-A-31-36",
    new Map([
      [CupPosition.WINNER, 14], // –ü
      [CupPosition.RUNNER_UP, 12], // –§
      [CupPosition.SEMI_FINAL, 10], // 1/2
      [CupPosition.QUARTER_FINAL, 9], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, >36 –∫–æ–º–∞–Ω–¥
  [
    "1-A-36+",
    new Map([
      [CupPosition.WINNER, 16], // –ü
      [CupPosition.RUNNER_UP, 14], // –§
      [CupPosition.SEMI_FINAL, 12], // 1/2
      [CupPosition.QUARTER_FINAL, 11], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, 13-18 –∫–æ–º–∞–Ω–¥ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 13 –∫–æ–º–∞–Ω–¥)
  [
    "1-B-13-18",
    new Map([
      [CupPosition.WINNER, 5], // –ü
      [CupPosition.RUNNER_UP, 4], // –§
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, 19-24 –∫–æ–º–∞–Ω–¥—ã
  [
    "1-B-19-24",
    new Map([
      [CupPosition.WINNER, 6], // –ü
      [CupPosition.RUNNER_UP, 5], // –§
      [CupPosition.SEMI_FINAL, 4], // 1/2
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, 25-30 –∫–æ–º–∞–Ω–¥
  [
    "1-B-25-30",
    new Map([
      [CupPosition.WINNER, 7], // –ü
      [CupPosition.RUNNER_UP, 6], // –§
      [CupPosition.SEMI_FINAL, 5], // 1/2
      [CupPosition.QUARTER_FINAL, 4], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, 31-36 –∫–æ–º–∞–Ω–¥
  [
    "1-B-31-36",
    new Map([
      [CupPosition.WINNER, 8], // –ü
      [CupPosition.RUNNER_UP, 7], // –§
      [CupPosition.SEMI_FINAL, 6], // 1/2
      [CupPosition.QUARTER_FINAL, 5], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, >36 –∫–æ–º–∞–Ω–¥
  [
    "1-B-36+",
    new Map([
      [CupPosition.WINNER, 9], // –ü
      [CupPosition.RUNNER_UP, 8], // –§
      [CupPosition.SEMI_FINAL, 7], // 1/2
      [CupPosition.QUARTER_FINAL, 6], // 1/4
    ]),
  ],

  // –¢–£–†–ù–ò–†–´ 2 –ö–ê–¢–ï–ì–û–†–ò–ò

  // –ö—É–±–æ–∫ A, 8-12 –∫–æ–º–∞–Ω–¥
  [
    "2-A-8-12",
    new Map([
      [CupPosition.WINNER, 6], // –ü
      [CupPosition.RUNNER_UP, 5], // –§
      [CupPosition.SEMI_FINAL, 4], // 1/2
      [CupPosition.QUARTER_FINAL, 3], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, 13-18 –∫–æ–º–∞–Ω–¥
  [
    "2-A-13-18",
    new Map([
      [CupPosition.WINNER, 7], // –ü
      [CupPosition.RUNNER_UP, 6], // –§
      [CupPosition.SEMI_FINAL, 5], // 1/2
      [CupPosition.QUARTER_FINAL, 4], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, 19-24 –∫–æ–º–∞–Ω–¥—ã
  [
    "2-A-19-24",
    new Map([
      [CupPosition.WINNER, 8], // –ü
      [CupPosition.RUNNER_UP, 7], // –§
      [CupPosition.SEMI_FINAL, 6], // 1/2
      [CupPosition.QUARTER_FINAL, 5], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, 25-30 –∫–æ–º–∞–Ω–¥
  [
    "2-A-25-30",
    new Map([
      [CupPosition.WINNER, 9], // –ü
      [CupPosition.RUNNER_UP, 8], // –§
      [CupPosition.SEMI_FINAL, 7], // 1/2
      [CupPosition.QUARTER_FINAL, 6], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, 31-36 –∫–æ–º–∞–Ω–¥
  [
    "2-A-31-36",
    new Map([
      [CupPosition.WINNER, 10], // –ü
      [CupPosition.RUNNER_UP, 9], // –§
      [CupPosition.SEMI_FINAL, 8], // 1/2
      [CupPosition.QUARTER_FINAL, 7], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ A, >36 –∫–æ–º–∞–Ω–¥
  [
    "2-A-36+",
    new Map([
      [CupPosition.WINNER, 12], // –ü
      [CupPosition.RUNNER_UP, 11], // –§
      [CupPosition.SEMI_FINAL, 10], // 1/2
      [CupPosition.QUARTER_FINAL, 9], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, 13-18 –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 13 –¥–ª—è 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
  [
    "2-B-13-18",
    new Map([
      [CupPosition.WINNER, 4], // –ü
      [CupPosition.RUNNER_UP, 3], // –§
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, 19-24 –∫–æ–º–∞–Ω–¥—ã (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 19 –¥–ª—è 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
  [
    "2-B-19-24",
    new Map([
      [CupPosition.WINNER, 5], // –ü
      [CupPosition.RUNNER_UP, 4], // –§
      [CupPosition.SEMI_FINAL, 3], // 1/2
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, 25-30 –∫–æ–º–∞–Ω–¥
  [
    "2-B-25-30",
    new Map([
      [CupPosition.WINNER, 6], // –ü
      [CupPosition.RUNNER_UP, 5], // –§
      [CupPosition.SEMI_FINAL, 4], // 1/2
      [CupPosition.QUARTER_FINAL, 3], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, 31-36 –∫–æ–º–∞–Ω–¥
  [
    "2-B-31-36",
    new Map([
      [CupPosition.WINNER, 6], // –ü
      [CupPosition.RUNNER_UP, 5], // –§
      [CupPosition.SEMI_FINAL, 4], // 1/2
      [CupPosition.QUARTER_FINAL, 3], // 1/4
    ]),
  ],

  // –ö—É–±–æ–∫ –ë, >36 –∫–æ–º–∞–Ω–¥
  [
    "2-B-36+",
    new Map([
      [CupPosition.WINNER, 7], // –ü
      [CupPosition.RUNNER_UP, 6], // –§
      [CupPosition.SEMI_FINAL, 5], // 1/2
      [CupPosition.QUARTER_FINAL, 4], // 1/4
    ]),
  ],
]);

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ—á–∫–∏ –∑–∞ –ø–æ–∑–∏—Ü–∏—é –≤ –∫—É–±–∫–µ
 * @param category - –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (1 –∏–ª–∏ 2)
 * @param cup - —Ç–∏–ø –∫—É–±–∫–∞ (A, B, C)
 * @param position - –ø–æ–∑–∏—Ü–∏—è –≤ –∫—É–±–∫–µ
 * @param totalTeams - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
 * @param qualifyingRoundPoints - –æ—á–∫–∏, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤ –æ—Ç–±–æ—Ä–æ—á–Ω–æ–º —Ç—É—Ä–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫—É–±–∫–∞ C)
 * @returns –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤
 */
export function getPoints(
  category: TournamentCategoryEnum,
  cup: Cup | undefined,
  position: CupPosition | undefined,
  totalTeams: number,
  qualifyingWins: number = 0
): number {
  let qualifyingPoints: number;
  let points: number;

  // –û—á–∫–∏ –∑–∞ –ø–æ–±–µ–¥—ã –≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º —ç—Ç–∞–ø–µ
  if (qualifyingWins >= 3) {
    // –ë–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ç—Ä—ë–º –ø–æ–±–µ–¥–∞–º
    qualifyingPoints = category === TournamentCategoryEnum.FEDERAL ? 3 : 2;
  } else if (qualifyingWins >= 1) {
    // 1-2 –ø–æ–±–µ–¥—ã
    qualifyingPoints = category === TournamentCategoryEnum.FEDERAL ? 2 : 1;
  } else {
    qualifyingPoints = 0;
  }

  if (!cup) {
    return qualifyingPoints;
  } else {
    if (!position) {
      throw new Error(`–†–∞—Å—Å—á–µ—Ç –æ—á–∫–æ–≤: –ù–µ –∑–∞–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –∫—É–±–∫–µ ${cup}`);
    }

    // –í —Å–ª—É—á–∞–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ (–ö—É–±–∫–∞ –°), —Ñ–∏–Ω–∞–ª–∏—Å—Ç—ã —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ –æ—á–∫–∞–º, –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –Ω–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º —ç—Ç–∞–ø–µ, –ø–æ–ª—É—á–∞—é—Ç –ø–æ 2 –æ—á–∫–∞, –ø–æ–ª—É—Ñ–∏–Ω–∞–ª–∏—Å—Ç—ã - –ø–æ 1 –æ—á–∫—É.
    if (cup === "C") {
      if (
        position === CupPosition.WINNER ||
        position === CupPosition.RUNNER_UP
      ) {
        // –§–∏–Ω–∞–ª–∏—Å—Ç—ã –∫—É–±–∫–∞ –° –ø–æ–ª—É—á–∞—é—Ç +2 –æ—á–∫–∞
        return qualifyingPoints + 2;
      } else if (
        position === CupPosition.SEMI_FINAL ||
        position === CupPosition.THIRD_PLACE
      ) {
        // –ü–æ–ª—É—Ñ–∏–Ω–∞–ª–∏—Å—Ç—ã –∫—É–±–∫–∞ –° –ø–æ–ª—É—á–∞—é—Ç +1 –æ—á–∫–æ
        return qualifyingPoints + 1;
      } else {
        return qualifyingPoints;
      }
    } else {
      // –ö—É–±–∫–∏ –ê –∏ –ë

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–º–∞–Ω–¥
      let teamsRange: TeamsRange;
      if (totalTeams <= 12) {
        teamsRange = "8-12";
      } else if (totalTeams <= 18) {
        teamsRange = "13-18";
      } else if (totalTeams <= 24) {
        teamsRange = "19-24";
      } else if (totalTeams <= 30) {
        teamsRange = "25-30";
      } else if (totalTeams <= 36) {
        teamsRange = "31-36";
      } else {
        teamsRange = "36+";
      }

      const key: CupPointsKey = `${category}-${cup}-${teamsRange}`;
      console.log(`üîë –ö–ª—é—á –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—á–∫–æ–≤: "${key}"`);

      const cupPointsMap = CUP_POINTS.get(key);

      if (!cupPointsMap) {
        throw new Error(
          `–†–∞—Å—Å—á–µ—Ç –æ—á–∫–æ–≤: ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∫–æ–≤ –¥–ª—è –∫—É–±–∫–∞ ${cup} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category} —Å ${totalTeams} –∫–æ–º–∞–Ω–¥–∞–º–∏ (–∫–ª—é—á: ${key})`
        );
      }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è 3 –º–µ—Å—Ç–∞ –≤ –∫—É–±–∫–µ A —Ç—É—Ä–Ω–∏—Ä–æ–≤ 1 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (position === CupPosition.THIRD_PLACE) {
        const semiFinalPoints = cupPointsMap.get(CupPosition.SEMI_FINAL);
        if (semiFinalPoints === undefined) {
          throw new Error(
            `–†–∞—Å—Å—á–µ—Ç –æ—á–∫–æ–≤: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—á–∫–∏ –∑–∞ –ø–æ–ª—É—Ñ–∏–Ω–∞–ª –¥–ª—è –∫—É–±–∫–∞ ${cup}`
          );
        }
        if (category === TournamentCategoryEnum.FEDERAL && cup === "A") {
          return semiFinalPoints + 1;
        } else {
          return semiFinalPoints;
        }
      } else {
        const points = cupPointsMap.get(position);
        if (points === undefined) {
          throw new Error(
            `–†–∞—Å—Å—á–µ—Ç –æ—á–∫–æ–≤: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ—á–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${position} –≤ –∫—É–±–∫–µ ${cup}`
          );
        }
        return points;
      }
    }
  }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∫–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
 */
export function getAllCupPointsConfig(): Record<
  string,
  Record<string, number>
> {
  const result: Record<string, Record<string, number>> = {};

  CUP_POINTS.forEach((pointsMap, key) => {
    result[key] = {};
    pointsMap.forEach((points, position) => {
      result[key][position] = points;
    });
  });

  return result;
}
