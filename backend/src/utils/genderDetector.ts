/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–∞ –ø–æ —Ä—É—Å—Å–∫–æ–º—É –∏–º–µ–Ω–∏
 */

export type Gender = "male" | "female" | null;

interface GenderResult {
  gender: Gender;
  confidence: "high" | "medium" | "low";
  reason?: string;
}

// –¢–∏–ø–∏—á–Ω—ã–µ –∂–µ–Ω—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
const FEMALE_ENDINGS = [
  "–∞",
  "—è",
  "–∏—è",
  "—å—è",
  "–Ω–∞",
  "–ª–∞",
  "—Ä–∞",
  "—Å–∞",
  "—Ç–∞",
  "–∫–∞",
  "–≥–∞",
  "–≤–∞",
  "–¥–∞",
  "–∑–∞",
  "–º–∞",
  "–ø–∞",
  "—Ö–∞",
  "—á–∞",
  "—à–∞",
  "—â–∞",
  "–∏–Ω–∞",
  "–∞–Ω–∞",
  "–µ–Ω–∞",
  "–æ–Ω–∞",
  "—É–Ω–∞",
  "—ã–Ω–∞",
];

// –¢–∏–ø–∏—á–Ω—ã–µ –º—É–∂—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
const MALE_ENDINGS = [
  "–∏–π",
  "–µ–π",
  "–∞–π",
  "–æ–π",
  "—ã–π",
  "–∏–Ω",
  "–æ–Ω",
  "–µ–Ω",
  "–∞–Ω",
  "—É–Ω",
  "—ã–Ω",
  "–¥–∏—Ä",
  "–º–∏—Ä",
  "—Ç–æ—Ä",
  "—Å–æ—Ä",
  "–Ω–æ—Ä",
  "–ª–æ—Ä",
  "–¥—Ä", // –ê–ª–µ–∫—Å–∞–Ω–¥—Ä
  "–Ω—Å", // –î–µ–Ω–∏—Å
  "–∏–ª", // –ú–∏—Ö–∞–∏–ª
  "–µ–ª", // –ü–∞–≤–µ–ª
  "–∏–º", // –ú–∞–∫—Å–∏–º, –í–∞–¥–∏–º
  "—ë–º", // –ê—Ä—Ç—ë–º
  "–∞–∫", // –ò—Å–∞–∞–∫
  "–µ–∫", // –í–∏—Ç–µ–∫
  "–∏—á", // –î—Ä–∞–≥–∞–Ω–∏—á
  "—é—à", // –°–µ—è–≤—É—à
  "–∞—Ç", // –ë—É–ª–∞—Ç
  "–∞–≤", // –í–ª–∞–¥–∏—Å–ª–∞–≤, –Ø—Ä–æ—Å–ª–∞–≤
];

// –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∂–µ–Ω—Å–∫–∏–µ –∏–º–µ–Ω–∞ (–∏—Å–∫–ª—é—á–µ–Ω–∏—è)
const DEFINITELY_FEMALE = [
  "–ª—é–±–æ–≤—å",
  "—Ä—É—Ñ—å",
  "—ç—Å—Ç–µ—Ä",
  "—Ä–∞—Ö–∏–ª—å",
  "—é–¥–∏—Ñ—å",
  "—ç–ª–∏—à–µ–≤–∞",
];

// –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –º—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞ (–∏—Å–∫–ª—é—á–µ–Ω–∏—è)
const DEFINITELY_MALE = [
  "–∏–≥–æ—Ä—å",
  "–æ–ª–µ–≥",
  "–≥–ª–µ–±",
  "–ª–µ–≤",
  "–¥–∞–≤–∏–¥",
  "–¥–∞–Ω–∏–∏–ª",
  "daniel",
  "michael",
  "david",
  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –º—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
  "–∞–ª–µ–∫—Å–∞–Ω–¥—Ä",
  "–∞–Ω–¥—Ä–µ–π",
  "–∞–ª–µ–∫—Å–µ–π",
  "–∞–Ω–∞—Ç–æ–ª–∏–π",
  "–∞–Ω—Ç–æ–Ω",
  "–∞—Ä—Ç—ë–º",
  "–∞—Ä—Ç–µ–º",
  "–±–æ—Ä–∏—Å",
  "–≤–∞–¥–∏–º",
  "–≤–∞–ª–µ—Ä–∏–π",
  "–≤–∞—Å–∏–ª–∏–π",
  "–≤–∏–∫—Ç–æ—Ä",
  "–≤–ª–∞–¥–∏–º–∏—Ä",
  "–≤–ª–∞–¥–∏—Å–ª–∞–≤",
  "–≤—è—á–µ—Å–ª–∞–≤",
  "–≥–µ–Ω–Ω–∞–¥–∏–π",
  "–≥–µ–æ—Ä–≥–∏–π",
  "–¥–µ–Ω–∏—Å",
  "–¥–º–∏—Ç—Ä–∏–π",
  "–µ–≤–≥–µ–Ω–∏–π",
  "–µ–≥–æ—Ä",
  "–∏–≤–∞–Ω",
  "–∏–ª—å—è",
  "–∫–∏—Ä–∏–ª–ª",
  "–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω",
  "–º–∞–∫—Å–∏–º",
  "–º–∏—Ö–∞–∏–ª",
  "–Ω–∏–∫–æ–ª–∞–π",
  "–ø–∞–≤–µ–ª",
  "–ø—ë—Ç—Ä",
  "–ø–µ—Ç—Ä",
  "—Ä–æ–º–∞–Ω",
  "—Å–µ—Ä–≥–µ–π",
  "—Å—Ç–∞–Ω–∏—Å–ª–∞–≤",
  "—é—Ä–∏–π",
  "—è—Ä–æ—Å–ª–∞–≤",
];

// –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –∏–º–µ–Ω–∞ (—Ç—Ä–µ–±—É—é—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è)
const AMBIGUOUS_NAMES = [
  "—Å–∞—à–∞",
  "–∂–µ–Ω—è",
  "–≤–∞–ª—è",
  "—à—É—Ä–∞",
  "—Å–ª–∞–≤–∞",
  "–ø–∞—à–∞",
  "–º–∏—à–∞",
  "–≥—Ä–∏—à–∞",
  "–∞–ª–µ—à–∞",
  "–Ω–∏–∫–∏—Ç–∞",
  "–∫–∏—Ä–∞",
  "–∞–≤–¥–æ—Ç—å—è",
  "–µ—Ñ—Ä–æ—Å–∏–Ω—å—è",
];

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–ª –ø–æ –ø–æ–ª–Ω–æ–º—É –∏–º–µ–Ω–∏ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é)
 */
export function detectGender(fullName: string): GenderResult {
  const name = fullName.trim().toLowerCase();

  // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ (–∏–º—è —Ñ–∞–º–∏–ª–∏—è –æ—Ç—á–µ—Å—Ç–≤–æ)
  const nameParts = name.split(/\s+/);
  const firstName = nameParts[0];
  const secondName = nameParts.length > 1 ? nameParts[1] : "";

  console.log(
    `üîç –û–ø—Ä–µ–¥–µ–ª—è—é –ø–æ–ª –¥–ª—è: "${fullName}" -> —á–∞—Å—Ç–∏: [${nameParts.join(", ")}]`
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏ –Ω–∞ –æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –º—É–∂—Å–∫–∏–µ –∏–º–µ–Ω–∞
  for (const part of nameParts) {
    if (DEFINITELY_MALE.includes(part)) {
      return {
        gender: "male",
        confidence: "high",
        reason: `–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –º—É–∂—Å–∫–æ–µ –∏–º—è: "${part}"`,
      };
    }

    if (DEFINITELY_FEMALE.includes(part)) {
      return {
        gender: "female",
        confidence: "high",
        reason: `–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∂–µ–Ω—Å–∫–æ–µ –∏–º—è: "${part}"`,
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –∏–º–µ–Ω–∞
    if (AMBIGUOUS_NAMES.includes(part)) {
      return {
        gender: null,
        confidence: "low",
        reason: `–Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ –∏–º—è "${part}", —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è`,
      };
    }
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è–º - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
  for (const part of nameParts) {
    // –ñ–µ–Ω—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    for (const ending of FEMALE_ENDINGS) {
      if (part.endsWith(ending)) {
        const confidence = ending.length > 2 ? "high" : "medium";
        return {
          gender: "female",
          confidence,
          reason: `–∂–µ–Ω—Å–∫–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ "-${ending}" –≤ "${part}"`,
        };
      }
    }

    // –ú—É–∂—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    for (const ending of MALE_ENDINGS) {
      if (part.endsWith(ending)) {
        const confidence = ending.length > 2 ? "high" : "medium";
        return {
          gender: "male",
          confidence,
          reason: `–º—É–∂—Å–∫–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ "-${ending}" –≤ "${part}"`,
        };
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–º–∏–ª–∏–∏ - –∏—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –ª—é–±–æ–π —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
  for (const part of nameParts) {
    if (
      part.endsWith("–æ–≤–∞") ||
      part.endsWith("–µ–≤–∞") ||
      part.endsWith("–∏–Ω–∞") ||
      part.endsWith("—Å–∫–∞—è")
    ) {
      return {
        gender: "female",
        confidence: "medium",
        reason: `–∂–µ–Ω—Å–∫–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –≤ "${part}"`,
      };
    }

    if (
      part.endsWith("–æ–≤") ||
      part.endsWith("–µ–≤") ||
      part.endsWith("–∏–Ω") ||
      part.endsWith("—Å–∫–∏–π")
    ) {
      return {
        gender: "male",
        confidence: "medium",
        reason: `–º—É–∂—Å–∫–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏ –≤ "${part}"`,
      };
    }
  }

  // –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –∏–º–µ–Ω: –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º—É–∂—Å–∫–∏—Ö –∏–º–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—ã–µ
  const consonants = "–±–≤–≥–¥–∂–∑–π–∫–ª–º–Ω–ø—Ä—Å—Ç—Ñ—Ö—Ü—á—à—â";
  const vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è";

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
  for (const part of nameParts) {
    const lastChar = part.charAt(part.length - 1);

    if (consonants.includes(lastChar)) {
      // –ï—Å–ª–∏ —á–∞—Å—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—É—é, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –º—É–∂—Å–∫–æ–µ
      // –ò—Å–∫–ª—é—á–∞–µ–º –º—è–≥–∫–∏–π –∑–Ω–∞–∫, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –≤ –º—É–∂—Å–∫–∏—Ö, –∏ –≤ –∂–µ–Ω—Å–∫–∏—Ö –∏–º–µ–Ω–∞—Ö
      if (!part.endsWith("—å") && part.length > 2) {
        // –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        return {
          gender: "male",
          confidence: "medium",
          reason: `"${part}" –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–æ–≥–ª–∞—Å–Ω—É—é (—Ç–∏–ø–∏—á–Ω–æ –¥–ª—è –º—É–∂—Å–∫–∏—Ö –∏–º–µ–Ω)`,
        };
      }
    }

    if (
      vowels.includes(lastChar) &&
      !part.endsWith("–∞") &&
      !part.endsWith("—è")
    ) {
      // –ï—Å–ª–∏ —á–∞—Å—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≥–ª–∞—Å–Ω—É—é (–∫—Ä–æ–º–µ –∞/—è), –Ω–æ –º—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –∂–µ–Ω—Å–∫–∏–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
      // –ú–æ–∂–µ—Ç –±—ã—Ç—å –º—É–∂—Å–∫–∏–º (–∫–∞–∫ –ù–∏–∫–∏—Ç–∞)
      if (part.endsWith("–æ") || part.endsWith("—É")) {
        return {
          gender: "male",
          confidence: "low",
          reason: `"${part}" –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ/—É (–º–æ–∂–µ—Ç –±—ã—Ç—å –º—É–∂—Å–∫–∏–º)`,
        };
      }
    }
  }

  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
  return {
    gender: null,
    confidence: "low",
    reason: "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
  };
}

/**
 * –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–º–µ–Ω
 */
export function detectGenderBatch(names: string[]): Map<string, GenderResult> {
  const results = new Map<string, GenderResult>();

  for (const name of names) {
    results.set(name, detectGender(name));
  }

  return results;
}
