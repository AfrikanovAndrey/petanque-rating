import { Request, Response } from "express";
import multer from "multer";
import * as XLSX from "xlsx";
import { RowDataPacket } from "mysql2/promise";
import { pool } from "../config/database";
import { TournamentModel } from "../models/TournamentModel";
import { PlayerModel } from "../models/PlayerModel";
import { SettingsModel } from "../models/SettingsModel";
import { LicensedPlayerModel } from "../models/LicensedPlayerModel";
import { TournamentController } from "./TournamentController";
import { TournamentUploadData, LicensedPlayerUploadData } from "../types";

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  fileFilter: (req, file, cb) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã
    const allowedMimes = [
      "application/vnd.ms-excel",
      "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
    ];
    if (allowedMimes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã (.xls, .xlsx)"));
    }
  },
  limits: {
    fileSize: 5 * 1024 * 1024, // 5MB
  },
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
const textUpload = multer({
  storage: multer.memoryStorage(),
  fileFilter: (req, file, cb) => {
    // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    const allowedMimes = ["text/plain"];
    const allowedExtensions = [".txt"];
    const fileExtension = file.originalname.toLowerCase().slice(-4);

    if (
      allowedMimes.includes(file.mimetype) ||
      allowedExtensions.includes(fileExtension)
    ) {
      cb(null, true);
    } else {
      cb(new Error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt)"));
    }
  },
  limits: {
    fileSize: 2 * 1024 * 1024, // 2MB
  },
});

export const uploadMiddleware = upload.single("tournament_file");
export const licensedPlayersUploadMiddleware = upload.single(
  "licensed_players_file"
);
export const playersTextUploadMiddleware = textUpload.single("players_file");

export class AdminController {
  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets
  static async uploadTournamentFromGoogleSheets(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const {
        tournament_name,
        tournament_date,
        tournament_type,
        tournament_category,
        google_sheets_url,
      } = req.body;

      if (
        !tournament_name ||
        !tournament_date ||
        !tournament_type ||
        !google_sheets_url
      ) {
        res.status(400).json({
          success: false,
          message:
            "–ù–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ –∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
        });
        return;
      }

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º URL Google Sheets
      if (!google_sheets_url.includes("docs.google.com/spreadsheets")) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ Google —Ç–∞–±–ª–∏—Ü—É",
        });
        return;
      }

      console.log(`üîó –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –∏–∑ Google Sheets: ${google_sheets_url}`);

      const result = await TournamentController.parseTournamentFromGoogleSheets(
        google_sheets_url,
        tournament_name,
        tournament_date,
        tournament_type,
        tournament_category
      );

      res.json({
        success: true,
        message: `–¢—É—Ä–Ω–∏—Ä "${tournament_name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${result.teamsCount}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–æ–≤: ${result.resultsCount}.`,
        tournament_id: result.tournamentId,
        results_count: result.resultsCount,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets:", error);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      let errorMessage = (error as Error).message;
      let statusCode = 500;

      if (errorMessage.includes("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")) {
        statusCode = 400;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        // –û–Ω–æ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      } else if (errorMessage.includes("–∏–º–µ–µ—Ç –Ω–µ–ø–æ–ª–Ω–æ–µ –∏–º—è")) {
        // –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é
        statusCode = 400;
        errorMessage = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∏–º–µ–Ω–∞—Ö –∏–≥—Ä–æ–∫–æ–≤ (–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏):\n${errorMessage}`;
      } else if (
        errorMessage.includes("–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞") ||
        errorMessage.includes("–¥–æ—Å—Ç—É–ø")
      ) {
        statusCode = 400;
        errorMessage = `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google —Ç–∞–±–ª–∏—Ü–µ: ${errorMessage}. 
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –¥–ª—è –æ–±—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ.`;
      } else if (errorMessage.includes("–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")) {
        statusCode = 400;
        errorMessage = `–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã: ${errorMessage}. 
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ Google —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º, 
        —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã, –∏–≥—Ä–æ–∫ 1, –∏–≥—Ä–æ–∫ 2, –∏–≥—Ä–æ–∫ 3, –∏–≥—Ä–æ–∫ 4.`;
      } else if (
        errorMessage.includes(
          "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google —Ç–∞–±–ª–∏—Ü—ã"
        )
      ) {
        statusCode = 400;
        errorMessage = `–¢–∞–±–ª–∏—Ü–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${errorMessage}. 
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ Google —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è.`;
      } else if (errorMessage.includes("–ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")) {
        statusCode = 400;
        errorMessage = `–¢–∞–±–ª–∏—Ü–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${errorMessage}. 
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏—Å—Ç—ã —Ç–∞–±–ª–∏—Ü—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞.`;
      } else if (errorMessage.includes("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ")) {
        statusCode = 400;
        errorMessage = `–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: ${errorMessage}. 
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ Google —Ç–∞–±–ª–∏—Ü–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`;
      }

      res.status(statusCode).json({
        success: false,
        message: errorMessage,
      });
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Excel —Ñ–∞–π–ª–∞
  static async uploadTournament(req: Request, res: Response): Promise<void> {
    try {
      if (!req.file) {
        res.status(400).json({
          success: false,
          message: "–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω",
        });
        return;
      }

      const {
        tournament_name,
        tournament_date,
        tournament_type,
        tournament_category,
      } = req.body;

      if (!tournament_name || !tournament_date || !tournament_type) {
        res.status(400).json({
          success: false,
          message: "–ù–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞ –∏ —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—É—Ä–Ω–∏—Ä–∞ (–Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ—ë –∏–∑ —Ñ–∞–π–ª–∞)
      const requestedCategory = tournament_category === "2" ? 2 : 1;
      console.log(`–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: ${requestedCategory}`);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
      const result = await TournamentController.parseTournamentData(
        req.file.buffer,
        req.file.originalname,
        tournament_name,
        tournament_date,
        tournament_type,
        requestedCategory
      );

      res.json({
        success: true,
        message: `–¢—É—Ä–Ω–∏—Ä "${tournament_name}" —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ–º–∞–Ω–¥: ${result.teamsCount}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–æ–≤: ${result.resultsCount}.`,
        tournament_id: result.tournamentId,
        results_count: result.resultsCount,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:", error);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      let errorMessage = (error as Error).message;
      let statusCode = 500;

      if (errorMessage.includes("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")) {
        statusCode = 400;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
        // –û–Ω–æ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      } else if (errorMessage.includes("–∏–º–µ–µ—Ç –Ω–µ–ø–æ–ª–Ω–æ–µ –∏–º—è")) {
        // –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é
        statusCode = 400;
        errorMessage = `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –∏–º–µ–Ω–∞—Ö –∏–≥—Ä–æ–∫–æ–≤ (–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏):\n${errorMessage}`;
      } else if (errorMessage.includes("–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")) {
        statusCode = 400;
        errorMessage = `–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–∞: ${errorMessage}. 
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ Excel —Ñ–∞–π–ª–µ –µ—Å—Ç—å –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–º, 
        —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã, –∏–≥—Ä–æ–∫ 1, –∏–≥—Ä–æ–∫ 2, –∏–≥—Ä–æ–∫ 3, –∏–≥—Ä–æ–∫ 4.`;
      } else if (errorMessage.includes("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞")) {
        statusCode = 400;
        errorMessage = `–§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${errorMessage}. 
        –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º Excel —Ñ–∞–π–ª–æ–º (.xlsx –∏–ª–∏ .xls).`;
      } else if (errorMessage.includes("–ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")) {
        statusCode = 400;
        errorMessage = `–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${errorMessage}. 
        –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∏—Å—Ç—ã —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞.`;
      }

      res.status(statusCode).json({
        success: false,
        message: errorMessage,
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã (–∞–¥–º–∏–Ω)
  static async getTournaments(req: Request, res: Response): Promise<void> {
    try {
      const tournaments = await TournamentModel.getAllTournaments();
      res.json({
        success: true,
        data: tournaments,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–∞–¥–º–∏–Ω)
  static async getTournamentDetails(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const tournamentId = parseInt(req.params.tournamentId);

      if (isNaN(tournamentId)) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞",
        });
        return;
      }

      const tournamentData = await TournamentModel.getTournamentWithResults(
        tournamentId
      );

      if (!tournamentData) {
        res.status(404).json({
          success: false,
          message: "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
        return;
      }

      res.json({
        success: true,
        data: tournamentData,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞",
      });
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω –∏ –º–µ–Ω–µ–¥–∂–µ—Ä)
  static async updateTournament(req: Request, res: Response): Promise<void> {
    try {
      const tournamentId = parseInt(req.params.tournamentId);

      if (isNaN(tournamentId)) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞",
        });
        return;
      }

      const { name, type, category, date } = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      if (!name && !type && !category && !date) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—É—Ä–Ω–∏—Ä
      const existingTournament = await TournamentModel.getTournamentById(
        tournamentId
      );
      if (!existingTournament) {
        res.status(404).json({
          success: false,
          message: "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
        return;
      }

      const success = await TournamentModel.updateTournament(
        tournamentId,
        name,
        type,
        category,
        date
      );

      if (success) {
        res.json({
          success: true,
          message: "–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        });
      } else {
        res.status(400).json({
          success: false,
          message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä",
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä (–∞–¥–º–∏–Ω)
  static async deleteTournament(req: Request, res: Response): Promise<void> {
    try {
      const tournamentId = parseInt(req.params.tournamentId);

      if (isNaN(tournamentId)) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞",
        });
        return;
      }

      const success = await TournamentModel.deleteTournament(tournamentId);

      if (success) {
        res.json({
          success: true,
          message: "–¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
        });
      } else {
        res.status(404).json({
          success: false,
          message: "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∞–¥–º–∏–Ω)
  static async getPlayers(req: Request, res: Response): Promise<void> {
    try {
      const players = await PlayerModel.getAllPlayers();
      res.json({
        success: true,
        data: players,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤",
      });
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)
  static async createPlayer(req: Request, res: Response): Promise<void> {
    try {
      const { name, gender, city } = req.body;

      if (!name || !gender) {
        res.status(400).json({
          success: false,
          message: "–ò–º—è –∏ –ø–æ–ª –∏–≥—Ä–æ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
        });
        return;
      }

      // –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
      const cleanedName = name.trim();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –º–∏–Ω–∏–º—É–º –∏–∑ –¥–≤—É—Ö —Å–ª–æ–≤ (–§–∞–º–∏–ª–∏—è –ò–º—è)
      const nameParts = cleanedName.split(/\s+/);
      if (nameParts.length < 2) {
        res.status(400).json({
          success: false,
          message:
            "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—é –∏ –ò–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω)",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
      const secondPart = nameParts[1];
      const isInitial = /^[–ê-–ØA-Z]\.?$/.test(secondPart);
      if (isInitial) {
        res.status(400).json({
          success: false,
          message:
            "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä–æ–∫–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω, –∞ –Ω–µ –ò–≤–∞–Ω–æ–≤ –ò.)",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
      const existingPlayer = await PlayerModel.getPlayerByName(cleanedName);
      if (existingPlayer) {
        res.status(400).json({
          success: false,
          message: "–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞
      const playerId = await PlayerModel.createPlayer(cleanedName, city);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª –∏ –≥–æ—Ä–æ–¥
      await PlayerModel.updatePlayer(playerId, cleanedName, gender, city);

      res.json({
        success: true,
        message: "–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        player_id: playerId,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä–æ–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞",
      });
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω)
  static async updatePlayer(req: Request, res: Response): Promise<void> {
    try {
      const playerId = parseInt(req.params.playerId);
      const { name, gender, city } = req.body;

      if (isNaN(playerId) || !name || !gender) {
        res.status(400).json({
          success: false,
          message: "ID –∏–≥—Ä–æ–∫–∞, –∏–º—è –∏ –ø–æ–ª –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
        });
        return;
      }

      const success = await PlayerModel.updatePlayer(
        playerId,
        name,
        gender,
        city
      );

      if (success) {
        res.json({
          success: true,
          message: "–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        });
      } else {
        res.status(404).json({
          success: false,
          message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞",
      });
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ (–∞–¥–º–∏–Ω –∏ –º–µ–Ω–µ–¥–∂–µ—Ä, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö)
  static async deletePlayer(req: Request, res: Response): Promise<void> {
    try {
      const playerId = parseInt(req.params.playerId);

      if (isNaN(playerId)) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
      const [participationRows] = await pool.execute<RowDataPacket[]>(
        `SELECT COUNT(*) as count 
         FROM team_players tp
         JOIN tournament_results tr ON tp.team_id = tr.team_id
         WHERE tp.player_id = ?`,
        [playerId]
      );

      const participationCount = (participationRows[0] as any).count;

      if (participationCount > 0) {
        res.status(400).json({
          success: false,
          message: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞. –ò–≥—Ä–æ–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ ${participationCount} —Ç—É—Ä–Ω–∏—Ä–∞—Ö. –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏—Ö –≤ —Ç—É—Ä–Ω–∏—Ä–∞—Ö, –∑–∞–ø—Ä–µ—â–µ–Ω–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π.`,
        });
        return;
      }

      const success = await PlayerModel.deletePlayer(playerId);

      if (success) {
        res.json({
          success: true,
          message: "–ò–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
        });
      } else {
        res.status(404).json({
          success: false,
          message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞",
      });
    }
  }

  // ==== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –õ–ò–¶–ï–ù–ó–ò–û–ù–ù–´–ú–ò –ò–ì–†–û–ö–ê–ú–ò ====

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  static async getLicensedPlayers(req: Request, res: Response): Promise<void> {
    try {
      const year = req.query.year
        ? parseInt(req.query.year as string)
        : undefined;
      const players = await LicensedPlayerModel.getAllLicensedPlayers(year);
      res.json({
        success: true,
        data: players,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
  static async getActiveLicensedPlayers(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const year = req.query.year
        ? parseInt(req.query.year as string)
        : new Date().getFullYear();
      const players = await LicensedPlayerModel.getActiveLicensedPlayers(year);
      res.json({
        success: true,
        data: players,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–¥—ã
  static async getLicensedPlayersYears(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const years = await LicensedPlayerModel.getAvailableYears();
      res.json({
        success: true,
        data: years,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤ –ª–∏—Ü–µ–Ω–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
  static async getLicensedPlayersStatistics(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const year = req.query.year
        ? parseInt(req.query.year as string)
        : new Date().getFullYear();
      const statistics = await LicensedPlayerModel.getStatistics(year);
      res.json({
        success: true,
        data: statistics,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤",
      });
    }
  }

  // –°–æ–∑–¥–∞—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  static async createLicensedPlayer(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const { license_number, player_name, city, license_date, year } =
        req.body;

      if (!license_number || !player_name || !city || !license_date || !year) {
        res.status(400).json({
          success: false,
          message: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –ª–∏—Ü–µ–Ω–∑–∏–∏
      const existing =
        await LicensedPlayerModel.getLicensedPlayerByLicenseNumber(
          license_number
        );
      if (existing) {
        res.status(400).json({
          success: false,
          message: "–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
        });
        return;
      }

      const playerId = await LicensedPlayerModel.addLicensedPlayer({
        license_number,
        player_name,
        city,
        license_date,
        year: parseInt(year),
      });

      res.json({
        success: true,
        message: "–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
        player_id: playerId,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
      });
    }
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  static async updateLicensedPlayer(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const playerId = parseInt(req.params.playerId);
      const updateData = req.body;

      if (isNaN(playerId)) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞",
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫
      const existing = await LicensedPlayerModel.getLicensedPlayerById(
        playerId
      );
      if (!existing) {
        res.status(404).json({
          success: false,
          message: "–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
        return;
      }

      // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–Ω–∑–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
      if (
        updateData.license_number &&
        updateData.license_number !== existing.license_number
      ) {
        const duplicate =
          await LicensedPlayerModel.getLicensedPlayerByLicenseNumber(
            updateData.license_number
          );
        if (duplicate && duplicate.id !== playerId) {
          res.status(400).json({
            success: false,
            message: "–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –ª–∏—Ü–µ–Ω–∑–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
          });
          return;
        }
      }

      const success = await LicensedPlayerModel.updateLicensedPlayer(
        playerId,
        updateData
      );

      if (success) {
        res.json({
          success: true,
          message: "–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        });
      } else {
        res.status(400).json({
          success: false,
          message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞",
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
      });
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  static async deleteLicensedPlayer(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const playerId = parseInt(req.params.playerId);

      if (isNaN(playerId)) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä–æ–∫–∞",
        });
        return;
      }

      const success = await LicensedPlayerModel.deleteLicensedPlayer(playerId);

      if (success) {
        res.json({
          success: true,
          message: "–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
        });
      } else {
        res.status(404).json({
          success: false,
          message: "–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞",
      });
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
  static async uploadLicensedPlayers(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      if (!req.file) {
        res.status(400).json({
          success: false,
          message: "–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω",
        });
        return;
      }

      const { year, replace_existing } = req.body;

      if (!year) {
        res.status(400).json({
          success: false,
          message: "–ì–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏",
        });
        return;
      }

      const parsedYear = parseInt(year);
      if (isNaN(parsedYear) || parsedYear < 2000 || parsedYear > 2100) {
        res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞",
        });
        return;
      }

      // –ü–∞—Ä—Å–∏–º Excel —Ñ–∞–π–ª
      const workbook = XLSX.read(req.file.buffer);
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
      const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });

      if (jsonData.length < 2) {
        res.status(400).json({
          success: false,
          message: "–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏",
        });
        return;
      }

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
      const players: LicensedPlayerUploadData[] = [];

      for (let i = 1; i < jsonData.length; i++) {
        const row = jsonData[i] as any[];
        if (row.length >= 5 && row[1] && row[2] && row[3] && row[4]) {
          // –û–∂–∏–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: ‚Ññ –ø/–ø, –§–ò–û, –î–∞—Ç–∞, ‚Ññ –ª–∏—Ü–µ–Ω–∑–∏–∏, –ì–æ—Ä–æ–¥
          const fullName = String(row[1]).trim();
          const licenseDate = String(row[2]).trim();
          const licenseNumber = String(row[3]).trim();
          const city = String(row[4]).trim();

          if (fullName && licenseDate && licenseNumber && city) {
            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
            let parsedDate = licenseDate;
            try {
              // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ M.D.YYYY, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
              const dateMatch = licenseDate.match(
                /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/
              );
              if (dateMatch) {
                const [, month, day, year] = dateMatch;
                parsedDate = `${year}-${month.padStart(2, "0")}-${day.padStart(
                  2,
                  "0"
                )}`;
              }
            } catch (dateError) {
              console.warn(
                `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${fullName}: ${licenseDate}`
              );
            }

            players.push({
              player_name: fullName,
              license_date: parsedDate,
              license_number: licenseNumber,
              city: city,
              year: parsedYear,
            });
          }
        }
      }

      if (players.length === 0) {
        res.status(400).json({
          success: false,
          message:
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π: ‚Ññ –ø/–ø, –§–ò–û, –î–∞—Ç–∞, ‚Ññ –ª–∏—Ü–µ–Ω–∑–∏–∏, –ì–æ—Ä–æ–¥",
        });
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const results = await LicensedPlayerModel.uploadLicensedPlayers(
        players,
        replace_existing === "true"
      );

      res.json({
        success: true,
        message: `–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ: ${results.created}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${results.updated}`,
        results,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤",
      });
    }
  }

  // –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
  static async uploadPlayersFromText(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      if (!req.file) {
        res.status(400).json({
          success: false,
          message: "–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω",
        });
        return;
      }

      // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      const fileContent = req.file.buffer.toString("utf-8");
      const lines = fileContent.split(/\r?\n/).filter((line) => line.trim());

      if (lines.length === 0) {
        res.status(400).json({
          success: false,
          message: "–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö",
        });
        return;
      }

      console.log(`üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: ${lines.length} —Å—Ç—Ä–æ–∫`);

      const results = {
        created: 0,
        updated: 0,
        skipped: 0,
        errors: [] as string[],
      };

      for (let i = 0; i < lines.length; i++) {
        const line = lines[i].trim();
        if (!line) continue;

        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞: "–∏–º—è, –≥–æ—Ä–æ–¥" –∏–ª–∏ "–∏–º—è, –ø–æ–ª, –≥–æ—Ä–æ–¥"
        const parts = line.split(",").map((part) => part.trim());

        if (parts.length < 2) {
          results.errors.push(
            `–°—Ç—Ä–æ–∫–∞ ${
              i + 1
            }: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç "${line}" (–æ–∂–∏–¥–∞–µ—Ç—Å—è: –∏–º—è, –≥–æ—Ä–æ–¥ –∏–ª–∏ –∏–º—è, –ø–æ–ª, –≥–æ—Ä–æ–¥)`
          );
          results.skipped++;
          continue;
        }

        const playerName = parts[0];
        let playerGender = "male"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º—É–∂—Å–∫–æ–π –ø–æ–ª
        let city = "";

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç: 2 –ø–æ–ª—è (–∏–º—è, –≥–æ—Ä–æ–¥) –∏–ª–∏ 3 –ø–æ–ª—è (–∏–º—è, –ø–æ–ª, –≥–æ—Ä–æ–¥)
        if (parts.length === 2) {
          // –§–æ—Ä–º–∞—Ç: –∏–º—è, –≥–æ—Ä–æ–¥
          city = parts[1];
        } else if (parts.length >= 3) {
          // –§–æ—Ä–º–∞—Ç: –∏–º—è, –ø–æ–ª, –≥–æ—Ä–æ–¥
          const genderField = parts[1].toLowerCase();
          if (
            genderField === "male" ||
            genderField === "female" ||
            genderField === "m" ||
            genderField === "f" ||
            genderField === "–º" ||
            genderField === "–∂"
          ) {
            // –í—Ç–æ—Ä–æ–µ –ø–æ–ª–µ —ç—Ç–æ –ø–æ–ª
            playerGender =
              genderField === "male" ||
              genderField === "m" ||
              genderField === "–º"
                ? "male"
                : "female";
            city = parts.slice(2).join(", "); // –û—Å—Ç–∞–ª—å–Ω–æ–µ - –≥–æ—Ä–æ–¥ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–ø—è—Ç—ã–µ)
          } else {
            // –í—Ç–æ—Ä–æ–µ –ø–æ–ª–µ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–æ–ª, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç: –∏–º—è, –≥–æ—Ä–æ–¥ (—Å –∑–∞–ø—è—Ç—ã–º–∏ –≤ –≥–æ—Ä–æ–¥–µ)
            city = parts.slice(1).join(", ");
          }
        }

        if (!playerName) {
          results.errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –∏–º—è –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ`);
          results.skipped++;
          continue;
        }

        if (!city) {
          results.errors.push(`–°—Ç—Ä–æ–∫–∞ ${i + 1}: –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω`);
          results.skipped++;
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞ (–§–∞–º–∏–ª–∏—è –ò–º—è)
        const nameParts = playerName.split(/\s+/);
        if (nameParts.length < 2) {
          results.errors.push(
            `–°—Ç—Ä–æ–∫–∞ ${
              i + 1
            }: –∏–º—è "${playerName}" –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –§–∞–º–∏–ª–∏—é –∏ –ò–º—è`
          );
          results.skipped++;
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
        const secondPart = nameParts[1];
        const isInitial = /^[–ê-–ØA-Z]\.?$/.test(secondPart);
        if (isInitial) {
          results.errors.push(
            `–°—Ç—Ä–æ–∫–∞ ${
              i + 1
            }: –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª—ã –≤ –∏–º–µ–Ω–∏ "${playerName}". –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è`
          );
          results.skipped++;
          continue;
        }

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
          const existingPlayer = await PlayerModel.getPlayerByName(playerName);

          if (existingPlayer && existingPlayer.length > 0) {
            // –ò–≥—Ä–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            const player = existingPlayer[0];
            const needsUpdate =
              player.city !== city || player.gender !== playerGender;

            if (needsUpdate) {
              await PlayerModel.updatePlayer(
                player.id,
                player.name,
                playerGender,
                city
              );
              results.updated++;
              console.log(
                `‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω –∏–≥—Ä–æ–∫: ${playerName} (${playerGender}, ${city})`
              );
            } else {
              results.skipped++;
              console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–≥—Ä–æ–∫: ${playerName}`);
            }
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            const playerId = await PlayerModel.createPlayer(playerName, city);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª
            await PlayerModel.updatePlayer(
              playerId,
              playerName,
              playerGender,
              city
            );

            results.created++;
            console.log(
              `‚úÖ –°–æ–∑–¥–∞–Ω –∏–≥—Ä–æ–∫: ${playerName} (${playerGender}, ${city})`
            );
          }
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–≥—Ä–æ–∫–∞ ${playerName}:`, error);
          results.errors.push(
            `–°—Ç—Ä–æ–∫–∞ ${i + 1}: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ "${playerName}"`
          );
          results.skipped++;
        }
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      let message = `–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–æ: ${results.created}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${results.updated}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${results.skipped}`;

      if (results.errors.length > 0) {
        message += `\n\n–û—à–∏–±–∫–∏:\n${results.errors.join("\n")}`;
      }

      res.json({
        success: true,
        message,
        results: {
          created: results.created,
          updated: results.updated,
          skipped: results.skipped,
          errors: results.errors,
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –∏–≥—Ä–æ–∫–æ–≤",
      });
    }
  }

  // ==== –ü–ï–†–ï–°–ß–Å–¢ –†–ï–ô–¢–ò–ù–ì–ê ====

  // –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –æ—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
  static async recalculateTournamentPoints(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      console.log("üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–µ—Ä–µ—Å—á—ë—Ç –æ—á–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤...");

      await TournamentModel.recalculatePoints();

      res.json({
        success: true,
        message: "–û—á–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ –æ—á–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—á—ë—Ç–µ –æ—á–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤",
      });
    }
  }
}
