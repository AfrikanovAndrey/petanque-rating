import * as XLSX from "xlsx";
import { PlayerModel } from "../models/PlayerModel";
import { Cup, CupPosition, Player, StageWithCells } from "../types";
import ExcelUtils from "../utils/excelUtils";

const COMMAND_HEADER = "–ö–æ–º–∞–Ω–¥–∞";
export const REGISTRATION_LIST = "–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
export const SWISS_RESULTS_LIST = "–ò—Ç–æ–≥–∏ —à–≤–µ–π—Ü–∞—Ä–∫–∏";

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
export function normalizeName(name: string): string {
  return name
    .toLowerCase()
    .replace(/,/g, "") // —É–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ
    .replace(/\s+/g, " ") // –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
    .replace(/[*.]/g, " ") // –∑–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    .replace(/\(.+\)/g, "") // —É–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–∫–æ–±–∫–∞—Ö. –ü—Ä–∏–º–µ—Ä: (—é–Ω) / (—é–Ω–∏–æ—Ä)
    .trim();
}

export function getCupListName(cup: Cup) {
  switch (cup) {
    case "A":
      return `^–ö—É–±–æ–∫ [Aa–ê–∞]$`;
    case "B":
      return `^–ö—É–±–æ–∫ [Bb–ë–±]$`;
    case "C":
      return `^–ö—É–±–æ–∫ [Cc–°—Å]$`;
  }
}

export type TeamPlayers = {
  orderNum: number;
  teamId?: number;
  players: Player[];
};

export type TeamQualifyingResults = {
  wins: number;
  loses: number;
};

export class TournamentParser {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ —Å –ª–∏—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @param player
   * @param teamsPlayers // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –õ–∏—Å—Ç–∞ —Ä–µ—à–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @returns –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —Å –ª–∏—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   */
  static detectPlayerTeamOrderNum(
    player: Player,
    teamsPlayers: TeamPlayers[],
    sheetName: string
  ): TeamPlayers {
    for (const team of teamsPlayers) {
      for (const teamPlayer of team.players) {
        if (teamPlayer.id === player.id) {
          return team;
        }
      }
    }

    throw new Error(
      `–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä–æ–∫–∞ "${player.name}" (–ª–∏—Å—Ç "${sheetName}") –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –õ–∏—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
    );
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ª–∏—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @param workbook
   * @returns
   *
   * –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∏—Å—Ç–∞:
   * 1) –õ–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
   * 2) –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –∏–¥—É—Ç –≤ —Å—Ç–æ–ª–±—Ü–µ –ø–æ–¥ —è—á–µ–π–∫–æ–π —Å —Ç–µ–∫—Å—Ç–æ–º "–ö–æ–º–∞–Ω–¥–∞"
   * 3) –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
   * 4) –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è
   *
   */
  static async parseTeamsFromRegistrationSheet(
    workbook: XLSX.WorkBook
  ): Promise<TeamPlayers[]> {
    let registrationSheet = ExcelUtils.findXlsSheet(
      workbook,
      REGISTRATION_LIST
    );

    if (!registrationSheet) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç "${REGISTRATION_LIST}"`);
    }

    const userDetectErrors = [];

    let teamOrderNum = 0;
    const teams: TeamPlayers[] = [];

    // –ò—â–µ–º —Å—Ç–æ–ª–±—Ü–µ—Ü —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–ö–æ–º–∞–Ω–¥–∞"
    const teamNameColumnCell = ExcelUtils.findCellByText(
      registrationSheet,
      COMMAND_HEADER
    );

    if (!teamNameColumnCell) {
      throw new Error(
        `–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∏—Å—Ç–∞ "${REGISTRATION_LIST}" : –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "${COMMAND_HEADER}"`
      );
    }

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç–æ–ª–±—Ü—É "–ö–æ–º–∞–Ω–¥–∞" –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    for (
      let rowIndex = teamNameColumnCell?.rowIndex + 1;
      rowIndex < 100;
      rowIndex++
    ) {
      let teamCell =
        registrationSheet[`${teamNameColumnCell.column}${rowIndex}`];

      if (ExcelUtils.isCellEmpty(teamCell)) {
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É - –∑–Ω–∞—á–∏—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        break;
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤
        const players: Player[] = [];

        const teamPlayersString = String(teamCell.v).trim();
        const rawTeamPlayers: string[] = teamPlayersString.split(",");

        for (const rawTeamPlayer of rawTeamPlayers) {
          try {
            if (normalizeName(rawTeamPlayer) != "") {
              const foundedPlayer = await this.detectPlayer(rawTeamPlayer);
              players.push(foundedPlayer);
            }
          } catch (error) {
            userDetectErrors.push(
              `${REGISTRATION_LIST}: ${(error as Error).message}`
            );
          }
        }

        if (players.length > 0) {
          teams.push({
            orderNum: teamOrderNum,
            players: players,
          });
          teamOrderNum++;
        }
      }
    }

    // –£–∫–∞–∂–∏—Ç–µ –Ω–∞ –ª–∏—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–Ω—É—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∏–≥—Ä–æ–∫–∞, –ª–∏–±–æ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞ –≤ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    if (userDetectErrors.length > 0) {
      throw new Error(
        `#–û—à–∏–±–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ "${REGISTRATION_LIST}"\n${userDetectErrors.join(
          "\n"
        )}`
      );
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);
    return teams;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏—Å—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫—É–±–∫–∞
   * @param workbook
   * @param teams
   * @returns
   */
  static async parseCupResults(
    workbook: XLSX.WorkBook,
    cup: Cup,
    teams: TeamPlayers[]
  ): Promise<Map<number, CupPosition>> {
    console.log(`üéØ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ö—É–±–∫–∞ ${cup}`);

    let worksheet = ExcelUtils.findXlsSheet(workbook, getCupListName(cup));

    const cupTeamResults: Map<number, CupPosition> = new Map();

    if (!worksheet) {
      console.log(`‚ùå  –õ–∏—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫—É–±–∫–∞ ${cup} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return new Map();
    }

    const stages = {
      quarterFinals: [
        {
          cells: ["B4", "B8", "B12", "B16", "B20", "B24", "B28", "B32"],
          position: CupPosition.QUARTER_FINAL,
        },
      ],
      semiFinals: [
        {
          cells: ["F6", "F14", "F22", "F30"],
          position: CupPosition.SEMI_FINAL,
        },
      ],
      thirdPlace: [{ cells: ["F38"], position: CupPosition.THIRD_PLACE }],
      finals: [{ cells: ["J10", "J26"], position: CupPosition.RUNNER_UP }],
      winner: [{ cells: ["N18"], position: CupPosition.WINNER }],
    } as Record<string, StageWithCells[]>;

    const errors: string[] = [];

    for (const stage of Object.values(stages)) {
      for (const stageInfo of stage) {
        for (const cellAddress of stageInfo.cells) {
          let player: Player;
          try {
            if (ExcelUtils.isCellEmpty(worksheet[cellAddress])) {
              // –ò–≥—Ä–∞ –∑–∞ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
              if (stageInfo.position == CupPosition.THIRD_PLACE) {
                continue;
              } else {
                errors.push(
                  `–Ø—á–µ–π–∫–∞ ${cellAddress} –Ω–∞ –ª–∏—Å—Ç–µ "–ö—É–±–æ–∫ ${cup}" –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`
                );
              }
            } else {
              const playerName = ExcelUtils.getCellText(worksheet[cellAddress]);
              player = await this.detectPlayer(playerName);
              const team = this.detectPlayerTeamOrderNum(
                player,
                teams,
                `–ö—É–±–æ–∫ ${cup}`
              );

              if (!team) {
                errors.push(
                  `–ò–≥—Ä–æ–∫ "${playerName}" —Å –ª–∏—Å—Ç–∞ ${SWISS_RESULTS_LIST} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –Ω–∞ –õ–∏—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
                );
              } else {
                cupTeamResults.set(team.orderNum, stageInfo.position);
              }
            }
          } catch (error) {
            errors.push((error as Error).message);
          }
        }
      }
    }

    if (errors.length !== 0) {
      throw new Error(
        `#–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç–µ "–ö—É–±–æ–∫ ${cup}":\n${errors}`
      );
    }

    console.log(`### –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–∞ ${cup}`);
    for (const [teamOrderNum, results] of cupTeamResults) {
      console.log(
        `Team #${teamOrderNum} : ${JSON.stringify(results, null, 0)}`
      );
    }

    return cupTeamResults;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏—Å—Ç–∞ "–ò—Ç–æ–≥–∏ –®–≤–µ–π—Ü–∞—Ä–∫–∏" –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥
   * @param workbook
   * @returns
   */
  static async parseSwissSystemResults(
    workbook: XLSX.WorkBook,
    teams: TeamPlayers[]
  ): Promise<Map<number, TeamQualifyingResults>> {
    console.log("üéØ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –®–≤–µ–π—Ü–∞—Ä–∫–∏");

    const errors = [];

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
    const swissSheet = ExcelUtils.findXlsSheet(workbook, SWISS_RESULTS_LIST);

    if (!swissSheet) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏—Å—Ç: ${SWISS_RESULTS_LIST}`);
    }

    const teamResults = new Map<number, TeamQualifyingResults>();

    const teamNameColumnHeader = "–ö–æ–º–∞–Ω–¥–∞";
    const teamWinsColumnHeader = "–†–µ–∑—É–ª—å—Ç–∞—Ç";

    const teamNameColumnCell = ExcelUtils.findCellByText(
      swissSheet,
      teamNameColumnHeader
    );

    if (!teamNameColumnCell) {
      errors.push(`–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º ${teamNameColumnHeader}`);
    }

    const teamWinsColumnCell = ExcelUtils.findCellByText(
      swissSheet,
      teamWinsColumnHeader
    );

    if (!teamWinsColumnCell) {
      errors.push(`–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º ${teamWinsColumnHeader}`);
    }

    if (teamNameColumnCell && teamWinsColumnCell) {
      for (
        let rowIndex = teamNameColumnCell?.rowIndex + 1;
        rowIndex < 100;
        rowIndex++
      ) {
        let teamCell = swissSheet[`${teamNameColumnCell.column}${rowIndex}`];

        const teamCellText = ExcelUtils.getCellText(teamCell);
        console.log(`–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: "${teamCellText}"`);

        if (teamCellText === normalizeName("–°–≤–æ–±–æ–¥–µ–Ω") || teamCellText === "") {
          break; //–ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ä–∞–∑–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã, –∫–æ–≥–¥–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ "–ö–æ–º–∞–Ω–¥–∞" –≤—Å—Ç—Ä–µ—á–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ "–°–≤–æ–±–æ–¥–µ–Ω"
        } else {
          let player: Player;
          try {
            const playerName = ExcelUtils.getCellText(teamCell);
            player = await this.detectPlayer(playerName);

            const team = this.detectPlayerTeamOrderNum(
              player,
              teams,
              SWISS_RESULTS_LIST
            );
            // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
            const qualifying_wins = Number(
              swissSheet[`${teamWinsColumnCell.column}${rowIndex}`].v
            );

            teamResults.set(team.orderNum, {
              wins: qualifying_wins,
              loses: 5 - qualifying_wins,
            });
          } catch (error) {
            errors.push((error as Error).message);
          }
        }
      }

      if (teamResults.size == 0) {
        errors.push(
          "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –®–≤–µ–π—Ü–∞—Ä–∫–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–µ—Ç –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏"
        );
      }
    }

    if (errors.length > 0) {
      throw new Error(
        `#–û—à–∏–±–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ "${SWISS_RESULTS_LIST}"\n` + errors.join("\n")
      );
    }
    return teamResults;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏—Å—Ç–æ–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∏–≥—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º —ç—Ç–∞–ø–µ
   * @param workbook
   * @returns Map<playerId: number, {wins: number, loses: number}>
   */
  static async parseGroupResults(
    workbook: XLSX.WorkBook,
    teams: TeamPlayers[]
  ): Promise<Map<number, TeamQualifyingResults>> {
    console.log("üéØ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞");

    const teamResults = new Map<number, TeamQualifyingResults>();

    const errors: string[] = [];

    for (const sheetName of Object.values(workbook.SheetNames)) {
      if (sheetName.includes("–ì—Ä—É–ø–ø–∞")) {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞

        console.log(`–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—Å—Ç–∞: "${sheetName}"`);

        const sheet = workbook.Sheets[sheetName];

        const teamNameColumnHeader = "–ö–æ–º–∞–Ω–¥–∞";
        const teamWinsColumnHeader = "–ø–æ–±–µ–¥—ã";

        const teamNameColumnCell = ExcelUtils.findCellByText(
          sheet,
          teamNameColumnHeader
        );

        const teamWinsColumnCell = ExcelUtils.findCellByText(
          sheet,
          teamWinsColumnHeader
        );

        let groupTeamCount = 0;

        console.log(
          `teamNameColumnCell = ${JSON.stringify(teamNameColumnCell, null, 2)}`
        );
        console.log(
          `teamWinsColumnCell = ${JSON.stringify(teamWinsColumnCell, null, 2)}`
        );

        const teamWins: Map<number, number> = new Map();
        let emptyRows = 0;

        if (teamNameColumnCell && teamWinsColumnCell) {
          for (
            let rowIndex = teamNameColumnCell?.rowIndex + 1;
            rowIndex < 30;
            rowIndex++
          ) {
            let teamCell = sheet[`${teamNameColumnCell.column}${rowIndex}`];

            if (ExcelUtils.isCellEmpty(teamCell)) {
              emptyRows++;
              if (emptyRows == 2) {
                break;
              }
            } else {
              emptyRows = 0;
              let player: Player;
              //try {
              const playerName = ExcelUtils.getCellText(teamCell);
              player = await this.detectPlayer(playerName);

              const team = this.detectPlayerTeamOrderNum(
                player,
                teams,
                sheetName
              );
              if (!team) {
                throw new Error(
                  `–ò–≥—Ä–æ–∫ "${playerName}" —Å –ª–∏—Å—Ç–∞ "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –õ–∏—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
                );
              }

              // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
              const qualifying_wins = Number(
                sheet[`${teamWinsColumnCell.column}${rowIndex}`].v
              );

              teamWins.set(team.orderNum, qualifying_wins);
              groupTeamCount++;
            }
          }
        }
        for (const [player, wins] of teamWins) {
          teamResults.set(player, { wins, loses: groupTeamCount - 1 - wins });
        }
      }
    }

    if (errors.length > 0) {
      throw new Error(
        `#–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥—Ä—É–ø–ø\n` + errors.join(",")
      );
    }

    return teamResults;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
   * @param teamName : string
   * @returns
   */
  static async detectPlayer(teamName: string): Promise<Player> {
    const foundedPlayers = await PlayerModel.getPlayerByName(
      normalizeName(teamName)
    );
    if (!foundedPlayers || foundedPlayers.length === 0) {
      throw new Error(`–ò–≥—Ä–æ–∫ "${teamName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    }
    if (foundedPlayers.length > 1) {
      throw new Error(
        `–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–µ: "${teamName}" - ${foundedPlayers
          .map((x) => x.name)
          .join(",")}`
      );
    }
    return foundedPlayers[0];
  }
}
