import * as XLSX from "xlsx";
import { PlayerModel } from "../models/PlayerModel";
import { Cup, CupPosition, Player, StageWithCells } from "../types";

type SheetCell = {
  column: string;
  rowIndex: number;
};

function parseCellAddress(address: string): SheetCell | null {
  const match = address.match(/^([A-Z]+)(\d+)$/i);
  if (!match) {
    return null; // –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å "–±—É–∫–≤—ã+—á–∏—Å–ª–∞"
  }
  const [, column, row] = match;
  return {
    column: column.toUpperCase(),
    rowIndex: parseInt(row, 10),
  };
}

function getCellText(cell: { v?: any }) {
  if (isCellEmpty(cell)) {
    return "";
  } else {
    return normalizeName(cell.v);
  }
}

function isCellEmpty(cell?: { v?: any }): boolean {
  if (!cell) return true; // —è—á–µ–π–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
  if (cell.v === undefined || cell.v === null) return true; // –Ω–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
  if (typeof cell.v === "string" && cell.v.trim() === "") return true; // –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
  return false; // –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
}

type FoundedSheet = {
  sheet: XLSX.WorkSheet;
  name: string;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ —Å –ª–∏—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * @param player
 * @param teamsPlayers // –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –õ–∏—Å—Ç–∞ —Ä–µ—à–∏—Å—Ç—Ä–∞—Ü–∏–∏
 * @returns –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —Å –ª–∏—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
function detectPlayerTeamOrderNum(
  player: Player,
  teamsPlayers: TeamPlayers[]
): TeamPlayers | undefined {
  for (const team of teamsPlayers) {
    for (const teamPlayer of team.players) {
      if (teamPlayer.id === player.id) {
        return team;
      }
    }
  }
}

const COMMAND_HEADER = "–ö–æ–º–∞–Ω–¥–∞";
export const REGISTRATION_LIST = "–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
export const SWISS_RESULTS_LIST = "–ò—Ç–æ–≥–∏ –®–≤–µ–π—Ü–∞—Ä–∫–∏";

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
export function normalizeName(name: string): string {
  return name
    .toLowerCase()
    .replace(/\s+/g, " ") // –∑–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
    .replace(/[*.]/g, " ") // –∑–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –∏ —Ç–æ—á–∫–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª—ã
    .trim();
}

export type TeamPlayers = {
  orderNum: number;
  teamId?: number;
  players: Player[];
};

export type TeamQualifyingResults = {
  wins: number;
  loses: number;
};

export class TournamentParser {
  /**
   * –ü–∞—Ä—Å–∏—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –ª–∏—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @param workbook
   * @returns
   *
   * –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ª–∏—Å—Ç–∞:
   * 1) –õ–∏—Å—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
   * 2) –°–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥ –∏–¥—É—Ç –≤ —Å—Ç–æ–ª–±—Ü–µ –ø–æ–¥ —è—á–µ–π–∫–æ–π —Å —Ç–µ–∫—Å—Ç–æ–º "–ö–æ–º–∞–Ω–¥–∞"
   * 3) –°–æ—Å—Ç–∞–≤ –∫–æ–º–∞–Ω–¥—ã - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
   * 4) –ö–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è
   *
   */
  static async parseTeamsFromRegistrationSheet(
    workbook: XLSX.WorkBook
  ): Promise<TeamPlayers[]> {
    let registrationSheet = this.findXlsSheet(workbook, REGISTRATION_LIST);

    if (!registrationSheet) {
      throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç "${REGISTRATION_LIST}"`);
    }

    const userDetectErrors = [];

    let teamOrderNum = 0;
    const teams: TeamPlayers[] = [];

    // –ò—â–µ–º —Å—Ç–æ–ª–±—Ü–µ—Ü —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º "–ö–æ–º–∞–Ω–¥–∞"
    const teamNameColumnCell = this.findCellByText(
      registrationSheet,
      COMMAND_HEADER
    );

    if (!teamNameColumnCell) {
      throw new Error(
        `–û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ª–∏—Å—Ç–∞ "${REGISTRATION_LIST}" : –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º "${COMMAND_HEADER}", —è–≤–ª—è—é—â–∞—è—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —Ç–∞–±–ª–∏—Ü—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏`
      );
    }

    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç–æ–ª–±—Ü—É "–ö–æ–º–∞–Ω–¥–∞" –∏ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤
    for (
      let rowIndex = teamNameColumnCell?.rowIndex + 1;
      rowIndex < 100;
      rowIndex++
    ) {
      let teamCell =
        registrationSheet[`${teamNameColumnCell.column}${rowIndex}`];

      if (isCellEmpty(teamCell)) {
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—É—Å—Ç—É—é —è—á–µ–π–∫—É - –∑–Ω–∞—á–∏—Ç —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
        break;
      } else {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —è—á–µ–π–∫–∏ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä–æ–∫–æ–≤
        const players: Player[] = [];

        const teamPlayersString = String(teamCell.v).trim();
        const rawTeamPlayers: string[] = teamPlayersString.split(",");

        for (const rawTeamPlayer of rawTeamPlayers) {
          try {
            const foundedPlayer = await this.detectPlayer(rawTeamPlayer);
            players.push(foundedPlayer);
          } catch (error) {
            userDetectErrors.push((error as Error).message);
          }
        }

        if (players.length > 0) {
          teams.push({
            orderNum: teamOrderNum,
            players: players,
          });
          teamOrderNum++;
        }
      }
    }

    // –£–∫–∞–∂–∏—Ç–µ –Ω–∞ –ª–∏—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–Ω—É—é —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è –∏–≥—Ä–æ–∫–∞, –ª–∏–±–æ —Å–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä–æ–∫–∞ –≤ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    if (userDetectErrors.length > 0) {
      throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞\n${userDetectErrors}`);
    }

    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${teams.length}`);
    return teams;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏—Å—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∫—É–±–∫–∞
   * @param workbook
   * @param teams
   * @returns
   */
  static async parseCupResults(
    workbook: XLSX.WorkBook,
    cup: Cup,
    teams: TeamPlayers[]
  ): Promise<Map<number, CupPosition>> {
    let worksheet = this.findXlsSheet(workbook, `–ö—É–±–æ–∫ ${cup}`);

    const cupTeamResults: Map<number, CupPosition> = new Map();

    if (worksheet) {
      const stages = {
        quarterFinals: [
          {
            cells: ["B4", "B8", "B12", "B16", "B20", "B24", "B28", "B32"],
            position: CupPosition.QUARTER_FINAL,
          },
        ],
        semiFinals: [
          {
            cells: ["F6", "F14", "F22", "F30"],
            position: CupPosition.SEMI_FINAL,
          },
        ],
        thirdPlace: [{ cells: ["F38"], position: CupPosition.THIRD_PLACE }],
        finals: [{ cells: ["J10", "J26"], position: CupPosition.RUNNER_UP }],
        winner: [{ cells: ["N18"], position: CupPosition.WINNER }],
      } as Record<string, StageWithCells[]>;

      const errors: string[] = [];

      for (const stage of Object.values(stages)) {
        for (const stageInfo of stage) {
          for (const cellAddress of stageInfo.cells) {
            let player: Player;
            try {
              if (isCellEmpty(worksheet[cellAddress])) {
                // –ò–≥—Ä–∞ –∑–∞ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
                if (stageInfo.position == CupPosition.THIRD_PLACE) {
                  continue;
                } else {
                  throw new Error(
                    `–Ø—á–µ–π–∫–∞ ${cellAddress} –Ω–∞ –ª–∏—Å—Ç–µ "–ö—É–±–æ–∫ ${cup}" –ø—É—Å—Ç–∞—è –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`
                  );
                }
              } else {
                const playerName = getCellText(worksheet[cellAddress]);
                player = await this.detectPlayer(playerName);
                const team = detectPlayerTeamOrderNum(player, teams);

                if (!team) {
                  throw new Error(
                    `–ò–≥—Ä–æ–∫ "${playerName}" —Å –ª–∏—Å—Ç–∞ ${SWISS_RESULTS_LIST} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –Ω–∞ –õ–∏—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
                  );
                }
                cupTeamResults.set(team.orderNum, stageInfo.position);
              }
            } catch (error) {
              errors.push((error as Error).message);
            }
          }
        }
      }

      if (errors.length !== 0) {
        throw new Error(
          `–û—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ª–∏—Å—Ç–µ "–ö—É–±–æ–∫ ${cup}":\n${errors}`
        );
      }

      console.log(`### –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–∞ ${cup}`);
      for (const [teamOrderNum, results] of cupTeamResults) {
        console.log(
          `Team #${teamOrderNum} : ${JSON.stringify(results, null, 0)}`
        );
      }
    }

    return cupTeamResults;
  }

  /**
   * –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
   */
  static findXlsSheet(
    workbook: XLSX.WorkBook,
    expectedListName: RegExp | string
  ): XLSX.WorkSheet | undefined {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
    for (const sheetName of workbook.SheetNames) {
      const pattern =
        expectedListName instanceof RegExp
          ? expectedListName
          : new RegExp(expectedListName);

      if (pattern.test(sheetName)) {
        return workbook.Sheets[sheetName];
      }
    }
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏—Å—Ç–∞ "–ò—Ç–æ–≥–∏ –®–≤–µ–π—Ü–∞—Ä–∫–∏" –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥
   * @param workbook
   * @returns
   */
  static async parseSwissSystemResults(
    workbook: XLSX.WorkBook,
    teams: TeamPlayers[]
  ): Promise<Map<number, TeamQualifyingResults>> {
    console.log("üéØ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –®–≤–µ–π–∞—Ä–∫–∏");

    const errors = [];
    try {
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
      const swissSheet = TournamentParser.findXlsSheet(
        workbook,
        normalizeName(SWISS_RESULTS_LIST)
      );

      const swissData = XLSX.utils.sheet_to_json(swissSheet!.sheet, {
        header: 1,
      });

      const teamResults = new Map<number, TeamQualifyingResults>();

      // –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ —Å—Ç—Ä–æ–∫–∏ 2 (–∏–Ω–¥–µ–∫—Å 1), —Ç–∞–∫ –∫–∞–∫ –≤ B2 –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –∫–æ–º–∞–Ω–¥—ã
      // –í —Ç–∞–±–ª–∏—Ü–µ: A=–ú–µ—Å—Ç–æ, B=–ò–º—è, C=–†–µ–∑—É–ª—å—Ç–∞—Ç(–ø–æ–±–µ–¥—ã), D=–ë—Ö–≥—Ü, E=–ü—Ä–æ–≥—Ä–µ—Å—Å, F=–î–µ—Ç–∞–ª
      for (let rowIndex = 1; rowIndex < swissData.length; rowIndex++) {
        const row = swissData[rowIndex] as any[];

        if (!row || row.length < 3) continue;

        // –°—Ç–æ–ª–±–µ—Ü B (–∏–Ω–¥–µ–∫—Å 1) - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        // –°—Ç–æ–ª–±–µ—Ü C (–∏–Ω–¥–µ–∫—Å 2) - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        const teamName =
          typeof row[1] === "string"
            ? row[1].replace(/,?$/, "").trim()
            : row[1];
        const winsValue = row[2];

        if (!teamName || teamName === "" || typeof teamName !== "string") {
          break; // –ù–∞—à–ª–∏ –ø—É—Å—Ç—É–± —Å—Ç—Ä–æ–∫—É - –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        }

        // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
        let qualifying_wins = 0;

        if (typeof winsValue === "number") {
          qualifying_wins = Math.floor(winsValue); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        } else if (typeof winsValue === "string") {
          const parsed = parseInt(winsValue, 10);
          qualifying_wins = isNaN(parsed) ? 0 : parsed;
        } else if (winsValue === undefined || winsValue === null) {
          qualifying_wins = 0;
        }

        let player: Player;
        try {
          player = await this.detectPlayer(teamName);
          const team = detectPlayerTeamOrderNum(player, teams);
          if (!team) {
            throw new Error(
              `–ò–≥—Ä–æ–∫ "${teamName}" —Å –ª–∏—Å—Ç–∞ ${SWISS_RESULTS_LIST} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –Ω–∞ –õ–∏—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
            );
          }

          teamResults.set(team.orderNum, {
            wins: qualifying_wins,
            loses: 5 - qualifying_wins,
          });
        } catch (error) {
          errors.push((error as Error).message);
        }
      }

      return teamResults;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –®–≤–µ–π—Ü–∞—Ä–∫–∏`, error);
      return new Map(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–∞—Ä—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —è—á–µ–π–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (–¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü)
   * @param sheet
   * @param header
   * @returns
   */
  static findCellByText(
    sheet: XLSX.WorkSheet,
    textToFind: string
  ): SheetCell | null {
    for (const cellAddress in sheet) {
      if (cellAddress[0] === "!") continue; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
      const cell = sheet[cellAddress];
      if (cell && cell.v && cell.v === textToFind) {
        return parseCellAddress(cellAddress); // –Ω–∞–π–¥–µ–Ω –∞–¥—Ä–µ—Å —è—á–µ–π–∫–∏
      }
    }
    return null;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏—Å—Ç–æ–≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∏–≥—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–º —ç—Ç–∞–ø–µ
   * @param workbook
   * @returns Map<playerId: number, {wins: number, loses: number}>
   */
  static async parseGroupResults(
    workbook: XLSX.WorkBook,
    teams: TeamPlayers[]
  ): Promise<Map<number, TeamQualifyingResults>> {
    console.log("üéØ –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞");

    const teamResults = new Map<number, TeamQualifyingResults>();

    const errors: string[] = [];

    for (const sheetName of Object.values(workbook.SheetNames)) {
      if (sheetName.includes("–ì—Ä—É–ø–ø–∞")) {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞

        console.log(`–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Å –ª–∏—Å—Ç–∞: "${sheetName}"`);

        const sheet = workbook.Sheets[sheetName];

        const teamNameColumnHeader = "–ö–æ–º–∞–Ω–¥–∞";
        const teamWinsColumnHeader = "–ø–æ–±–µ–¥—ã";

        const teamNameColumnCell = this.findCellByText(
          sheet,
          teamNameColumnHeader
        );

        const teamWinsColumnCell = this.findCellByText(
          sheet,
          teamWinsColumnHeader
        );

        let groupTeamCount = 0;

        console.log(
          `teamNameColumnCell = ${JSON.stringify(teamNameColumnCell, null, 2)}`
        );
        console.log(
          `teamWinsColumnCell = ${JSON.stringify(teamWinsColumnCell, null, 2)}`
        );

        const teamWins: Map<number, number> = new Map();
        let emptyRows = 0;

        if (teamNameColumnCell && teamWinsColumnCell) {
          for (
            let rowIndex = teamNameColumnCell?.rowIndex + 1;
            rowIndex < 30;
            rowIndex++
          ) {
            let teamCell = sheet[`${teamNameColumnCell.column}${rowIndex}`];

            if (isCellEmpty(teamCell)) {
              emptyRows++;
              if (emptyRows == 2) {
                break;
              }
            } else {
              emptyRows = 0;
              let player: Player;
              //try {
              const playerName = getCellText(teamCell);
              player = await this.detectPlayer(playerName);

              const team = detectPlayerTeamOrderNum(player, teams);
              if (!team) {
                throw new Error(
                  `–ò–≥—Ä–æ–∫ "${playerName}" —Å –ª–∏—Å—Ç–∞ "${sheetName}" –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –õ–∏—Å—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏`
                );
              }

              // –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥
              const qualifying_wins = Number(
                sheet[`${teamWinsColumnCell.column}${rowIndex}`].v
              );

              teamWins.set(team.orderNum, qualifying_wins);
              //   } catch (error) {
              //     errors.push((error as Error).message);
              //   }

              //   if (typeof winsValue === "number") {
              //     qualifying_wins = Math.floor(winsValue); // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
              //   } else if (typeof winsValue === "string") {
              //     const parsed = parseInt(winsValue, 10);
              //     qualifying_wins = isNaN(parsed) ? 0 : parsed;
              //   } else if (winsValue === undefined || winsValue === null) {
              //     qualifying_wins = 0;
              //   }

              groupTeamCount++;
            }
          }
        }
        for (const [player, wins] of teamWins) {
          teamResults.set(player, { wins, loses: groupTeamCount - 1 - wins });
        }
      }
    }

    if (errors.length > 0) {
      throw new Error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏\n${errors}`);
    }

    return teamResults;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç—Ä–æ–∫–µ –ø–æ–∏—Å–∫–∞
   * @param teamName : string
   * @returns
   */
  static async detectPlayer(teamName: string): Promise<Player> {
    const foundedPlayers = await PlayerModel.getPlayerByName(
      normalizeName(teamName)
    );
    if (!foundedPlayers || foundedPlayers.length === 0) {
      throw new Error(`–ò–≥—Ä–æ–∫ "${teamName}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
    }
    if (foundedPlayers.length > 1) {
      throw new Error(`–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç—Ä–æ–∫–µ: "${teamName}"`);
    }
    return foundedPlayers[0];
  }
}
