import { Request, Response } from "express";
import * as XLSX from "xlsx";
import { getAllCupPointsConfig, getPoints } from "../config/cupPoints";
import { pool } from "../config/database";
// import removed: PlayerTournamentPointsModel –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import {
  BUTTING_MATCH_LIST_REGEXP,
  generateTeamDescription,
  GROUP_RESULTS_LIST_REGEXP,
  ManualInputTeam,
  MANUAL_INPUT_LIST,
  normalizeName,
  REGISTRATION_LIST,
  SWISS_RESULTS_LIST,
  TeamPlayers,
  TeamQualifyingResults,
  TournamentParser,
} from "../controllers/TournamentParser";
import { TeamModel } from "../models/TeamModel";
import { TournamentModel } from "../models/TournamentModel";
import { GoogleSheetsService } from "../services/GoogleSheetsService";
import {
  Cup,
  CupPosition,
  TeamResults,
  TournamentCategoryEnum,
  TournamentType,
} from "../types";
import ExcelUtils from "../utils/excelUtils";

export class TournamentController {
  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ TournamentCategoryEnum –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è getCupPoints
   */
  private static convertCategoryEnumToString(
    categoryEnum: TournamentCategoryEnum
  ): "1" | "2" {
    return categoryEnum === TournamentCategoryEnum.FEDERAL ||
      categoryEnum === (TournamentCategoryEnum.FEDERAL as number)
      ? "1"
      : "2";
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ—á–∫–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞
   * –ï—Å–ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—å –ø–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä (DOUBLETTE_MALE/FEMALE), —Å—É–º–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
   */
  private static async getEffectiveTeamsCountForNewTournament(
    tournamentDate: string,
    tournamentType: TournamentType,
    currentTeamsCount: number
  ): Promise<number> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç—É—Ä–Ω–∏—Ä DOUBLETTE_MALE –∏–ª–∏ DOUBLETTE_FEMALE
    if (
      tournamentType !== TournamentType.DOUBLETTE_MALE &&
      tournamentType !== TournamentType.DOUBLETTE_FEMALE
    ) {
      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥
      return currentTeamsCount;
    }

    // –ò—â–µ–º –ø–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
    const pairType =
      tournamentType === TournamentType.DOUBLETTE_MALE
        ? TournamentType.DOUBLETTE_FEMALE
        : TournamentType.DOUBLETTE_MALE;

    const [pairTournaments] = await pool.execute<any[]>(
      `SELECT id FROM tournaments WHERE date = ? AND type = ?`,
      [tournamentDate, pairType]
    );

    if (pairTournaments.length > 0) {
      // –ù–∞–π–¥–µ–Ω –ø–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä, —Å—É–º–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
      const pairTournamentId = pairTournaments[0].id;
      const pairTournamentTeams = await TournamentModel.getTournamentTeamsCount(
        pairTournamentId
      );
      const totalTeams = currentTeamsCount + pairTournamentTeams;

      console.log(
        `   üîó –ù–∞–π–¥–µ–Ω –ø–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä (${pairType}) –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å. –°—É–º–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã: ${currentTeamsCount} + ${pairTournamentTeams} = ${totalTeams}`
      );

      return totalTeams;
    }

    // –ü–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    return currentTeamsCount;
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –¥–∞–Ω–Ω—ã–º–∏ —Å –∫—É–±–∫–æ–≤
   * @param cup - –∫—É–±–æ–∫
   * @param cupTeamResults - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –≤ –∫—É–±–∫–µ
   * @param teams - –∫–æ–º–∞–Ω–¥—ã
   * @param teamResults - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥ —Å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
   */
  static async modifyTeamResultsWithCupResults(
    cup: Cup,
    cupTeamResults: Map<number, CupPosition>,
    teams: TeamPlayers[],
    teamResults: Map<number, TeamResults>
  ) {
    for (const [teamOrderNum, cupPosition] of cupTeamResults) {
      const curTeamResults = teamResults.get(teamOrderNum);

      if (!curTeamResults) {
        throw new Error(
          `–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—É–±–∫–∞ ${cup}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã #${
            teamOrderNum + 1
          }(${teams[teamOrderNum].players
            .map((player) => player.name)
            .join(", ")})`
        );
      }

      let winsModifier = 0;
      let losesModifier = 0;

      switch (cupTeamResults.size / 4) {
        // –ö—É–±–æ–∫ –Ω–∞ 4 –∫–æ–º–∞–Ω–¥—ã
        case 1:
          switch (cupPosition) {
            case CupPosition.WINNER:
              winsModifier = 2;
              losesModifier = 0;
              break;
            case CupPosition.RUNNER_UP:
              winsModifier = 1;
              losesModifier = 1;
              break;
            case CupPosition.THIRD_PLACE:
              winsModifier = 1;
              losesModifier = 1;
              break;
            case CupPosition.ROUND_OF_4:
              winsModifier = 0;
              losesModifier = 2;
              break;
          }
          break;
        // –ö—É–±–æ–∫ –Ω–∞ 8 –∫–æ–º–∞–Ω–¥
        case 2:
          switch (cupPosition) {
            case CupPosition.WINNER:
              winsModifier = 3;
              losesModifier = 0;
              break;
            case CupPosition.RUNNER_UP:
              winsModifier = 2;
              losesModifier = 1;
              break;
            case CupPosition.THIRD_PLACE:
              winsModifier = 2;
              losesModifier = 1;
              break;
            case CupPosition.ROUND_OF_4:
              winsModifier = 1;
              losesModifier = 1;
              break;
            case CupPosition.ROUND_OF_8:
              winsModifier = 0;
              losesModifier = 1;
              break;
          }
          break;
        // –ö—É–±–æ–∫ –Ω–∞ 16 –∫–æ–º–∞–Ω–¥
        case 4:
          switch (cupPosition) {
            case CupPosition.WINNER:
              winsModifier = 4;
              losesModifier = 0;
              break;
            case CupPosition.RUNNER_UP:
              winsModifier = 3;
              losesModifier = 1;
              break;
            case CupPosition.THIRD_PLACE:
              winsModifier = 3;
              losesModifier = 1;
              break;
            case CupPosition.ROUND_OF_4:
              winsModifier = 2;
              losesModifier = 1;
              break;
            case CupPosition.ROUND_OF_8:
              winsModifier = 1;
              losesModifier = 1;
              break;
            case CupPosition.ROUND_OF_16:
              winsModifier = 0;
              losesModifier = 1;
              break;
          }
          break;
      }

      teamResults.set(teamOrderNum, {
        cup,
        cupPosition,
        qualifyingWins: curTeamResults.wins,
        wins: curTeamResults.wins + winsModifier,
        loses: curTeamResults.loses + losesModifier,
      });
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
  static validateDocumentStructure(workbook: XLSX.WorkBook) {
    console.log("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
    const errors: string[] = [];

    if (!ExcelUtils.findXlsSheet(workbook, REGISTRATION_LIST)) {
      errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`);
    }

    if (!ExcelUtils.findXlsSheet(workbook, /^–∫—É–±–æ–∫ [a–∞]$/)) {
      errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç '–ö—É–±–æ–∫ –ê'`);
    }

    const swissSheet = ExcelUtils.findXlsSheet(workbook, SWISS_RESULTS_LIST);
    const groupSheet = ExcelUtils.findXlsSheet(
      workbook,
      GROUP_RESULTS_LIST_REGEXP
    );

    if (!swissSheet && !groupSheet) {
      errors.push(
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏—Å—Ç—ã –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞: "${SWISS_RESULTS_LIST}" –∏–ª–∏ "–ì—Ä—É–ø–ø–∞ –ê"`
      );
    }

    if (errors.length > 0) {
      throw new Error(errors.join("\n"));
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getAllTournaments(req: Request, res: Response) {
    try {
      const tournaments = await TournamentModel.getAllTournaments();
      res.json({ success: true, data: tournaments });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤:", error);
      res
        .status(500)
        .json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getTournamentDetails(req: Request, res: Response) {
    const tournamentId = parseInt(req.params.id);

    if (isNaN(tournamentId)) {
      return res
        .status(400)
        .json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞" });
    }

    try {
      const tournament = await TournamentModel.getTournamentById(tournamentId);

      if (!tournament) {
        return res
          .status(404)
          .json({ success: false, message: "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const results = await TournamentModel.getTournamentResults(tournamentId);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫—É–±–∫–∞–º
      const filteredResults = results.filter((result) => result.cup);

      const sortedResults = filteredResults.sort((a, b) => {
        // –ü–æ—Ä—è–¥–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ª—É—á—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–≤—ã–º–∏)
        const positionPriority: Record<CupPosition, number> = {
          [CupPosition.WINNER]: 1,
          [CupPosition.RUNNER_UP]: 2,
          [CupPosition.THIRD_PLACE]: 3,
          [CupPosition.ROUND_OF_4]: 4,
          [CupPosition.ROUND_OF_8]: 5,
          [CupPosition.ROUND_OF_16]: 6,
        };

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫—É–±–∫—É (A, –∑–∞—Ç–µ–º B)
        if (a.cup !== b.cup) {
          return a.cup!.localeCompare(b.cup!);
        }

        // –ó–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –∫—É–±–∫–∞
        const aPriority = a.cup_position
          ? positionPriority[a.cup_position] || 999
          : 999;
        const bPriority = b.cup_position
          ? positionPriority[b.cup_position] || 999
          : 999;

        return aPriority - bPriority;
      });

      res.json({
        success: true,
        data: {
          ...tournament,
          results: sortedResults,
        },
      });
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`,
        error
      );
      res
        .status(500)
        .json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getTournamentsStats(req: Request, res: Response) {
    try {
      const tournaments = await TournamentModel.getAllTournaments();

      const stats = {
        totalTournaments: tournaments.length,
        recentTournaments: tournaments
          .sort(
            (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
          )
          .slice(0, 5),
        tournamentsThisYear: tournaments.filter(
          (t) => new Date(t.date).getFullYear() === new Date().getFullYear()
        ).length,
      };

      res.json({ success: true, data: stats });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:", error);
      res
        .status(500)
        .json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–£–ë–ö–ê–ú–ò ==========

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getAllCupResults(req: Request, res: Response) {
    try {
      const results = await TournamentModel.getCupResults();
      res.json({ success: true, data: results });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getCupResultsByTournament(req: Request, res: Response) {
    const tournamentId = parseInt(req.params.id);

    if (isNaN(tournamentId)) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞",
      });
    }

    try {
      const results = await TournamentModel.getCupResultsByTournament(
        tournamentId
      );
      res.json({ success: true, data: results });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É–±–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getCupResultsByCup(req: Request, res: Response) {
    const tournamentId = parseInt(req.params.id);
    const cup = req.params.cup;

    if (isNaN(tournamentId)) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞",
      });
    }

    if (!cup) {
      return res.status(400).json({
        success: false,
        message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–±–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
      });
    }

    try {
      const results = await TournamentModel.getCupResultsByCup(
        tournamentId,
        cup
      );
      res.json({ success: true, data: results });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // ################################################################
  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
  // ################################################################
  static async parseTournamentData(
    fileBuffer: Buffer,
    fileName: string,
    tournamentName: string,
    tournamentDate: string,
    tournamentType: TournamentType,
    tournamentCategory: TournamentCategoryEnum,
    providedWorkbook?: XLSX.WorkBook
  ): Promise<{
    tournamentId: number;
    teamsCount: number;
    resultsCount: number;
  }> {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞: "${fileName}"`);

    // –£–±–∏—Ä–∞–µ–º –±–æ–ª—å—à—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

    try {
      console.log(
        `–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: "${fileName}"`
      );

      // –ü–∞—Ä—Å–∏–º XLSX —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π workbook
      let workbook: XLSX.WorkBook;
      try {
        if (providedWorkbook) {
          workbook = providedWorkbook;
          console.log(
            `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π workbook (Google Sheets). –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: ${workbook.SheetNames.join(
              ", "
            )}`
          );
        } else {
          workbook = XLSX.read(fileBuffer, { type: "buffer" });
          console.log(
            `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${workbook.SheetNames.join(", ")}`
          );
        }
      } catch (error) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ "${fileName}": ${
            (error as Error).message
          }`
        );
      }

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–∏—Å—Ç–∞ "–†—É—á–Ω–æ–π –≤–≤–æ–¥"
      const manualInputSheet = ExcelUtils.findXlsSheet(
        workbook,
        MANUAL_INPUT_LIST
      );

      let teams: TeamPlayers[];
      let teamResults: Map<number, TeamResults>;

      if (manualInputSheet) {
        // ====== –†–ï–ñ–ò–ú: –†—É—á–Ω–æ–π –≤–≤–æ–¥ ======
        console.log(
          `üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–∏—Å—Ç "${MANUAL_INPUT_LIST}" - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞`
        );

        // –ü–∞—Ä—Å–∏–º –ª–∏—Å—Ç —Å —Ä—É—á–Ω—ã–º –≤–≤–æ–¥–æ–º
        const manualInputTeams: ManualInputTeam[] =
          await TournamentParser.parseManualInputSheet(workbook);

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        teamResults = new Map<number, TeamResults>();
        for (const team of manualInputTeams) {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
          const cup = team.cup as Cup | undefined;
          const cupPosition = team.position as CupPosition | undefined;

          teamResults.set(team.orderNum, {
            cup: cup,
            cupPosition: cupPosition,
            qualifyingWins: 0,
            wins: 0,
            loses: 0,
            points: team.points,
          });
        }

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ManualInputTeam[] –≤ TeamPlayers[] –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        teams = manualInputTeams.map((t) => ({
          orderNum: t.orderNum,
          players: t.players,
        }));

        console.log(
          `‚úì –†–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${teams.length} –∫–æ–º–∞–Ω–¥(—ã)`
        );
      } else {
        // ====== –†–ï–ñ–ò–ú: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ======
        console.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—É—Ä–Ω–∏—Ä–∞`);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
        this.validateDocumentStructure(workbook);
        console.log("‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");

        // 2. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö c –ª–∏—Å—Ç–æ–≤
        // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        teams = await TournamentParser.parseTeamsFromRegistrationSheet(
          workbook
        );

        // 3. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞

        const teamQualifyingResults =
          await TournamentParser.parseQualifyingResults(workbook, teams);

        const abButtingMatchResults =
          await TournamentParser.parseABButtingMatchResults(workbook, teams);

        const aCupTeamsResults = await TournamentParser.parseCupResults(
          workbook,
          "A",
          teams
        );
        const bCupTeamsResults = await TournamentParser.parseCupResults(
          workbook,
          "B",
          teams
        );
        const cCupTeamsResults = await TournamentParser.parseCupResults(
          workbook,
          "C",
          teams
        );

        // 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –≤–º–µ—Å—Ç–µ
        teamResults = new Map<number, TeamResults>(); // key = teamOrderNum

        // –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ - –∫–æ–º–∞–Ω–¥–µ
        for (const [teamOrderNum, qualifyingResults] of teamQualifyingResults) {
          teamResults.set(teamOrderNum, {
            qualifyingWins: qualifyingResults.wins,
            wins: qualifyingResults.wins,
            loses: qualifyingResults.loses,
          });
        }

        // –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç—ã–∫–æ–≤–æ—á–Ω—ã—Ö –∏–≥—Ä - –∫–æ–º–∞–Ω–¥–µ
        for (const [teamOrderNum, result] of abButtingMatchResults) {
          let curTeamResults = teamResults.get(teamOrderNum);
          if (!curTeamResults) {
            throw new Error(
              `–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—ã–∫–æ–≤–æ—á–Ω—ã—Ö –∏–≥—Ä: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã #${generateTeamDescription(
                teams[teamOrderNum]
              )}`
            );
          }
          if (result) curTeamResults.wins++;
          else {
            curTeamResults.loses++;
          }
          teamResults.set(teamOrderNum, curTeamResults);
        }

        // –ü—Ä–∏–≤—è–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–æ–≤ - –∫–æ–º–∞–Ω–¥–µ
        // –ö—É–±–æ–∫ –ê
        await this.modifyTeamResultsWithCupResults(
          "A",
          aCupTeamsResults,
          teams,
          teamResults
        );

        if (bCupTeamsResults) {
          await this.modifyTeamResultsWithCupResults(
            "B",
            bCupTeamsResults,
            teams,
            teamResults
          );
        }

        if (cCupTeamsResults) {
          await this.modifyTeamResultsWithCupResults(
            "C",
            cCupTeamsResults,
            teams,
            teamResults
          );
        }
      }

      // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î (–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
      const connection = await pool.getConnection();
      let tournamentId: number;

      try {
        await connection.beginTransaction();
        console.log("üîÑ –ù–∞—á–∞—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞");

        tournamentId = await TournamentModel.createTournament(
          tournamentName,
          tournamentType,
          tournamentCategory,
          tournamentDate,
          connection
        );

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ (—Å —É—á—ë—Ç–æ–º –ø–∞—Ä–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –æ–¥–∏–Ω –¥–µ–Ω—å)
        const effectiveTeamsCount =
          await TournamentController.getEffectiveTeamsCountForNewTournament(
            tournamentDate,
            tournamentType,
            teams.length
          );

        console.log(
          `üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –æ—á–∫–æ–≤: ${effectiveTeamsCount}`
        );

        for (const team of teams) {
          const teamPlayers: number[] = [];
          const teamPlayerNames: string[] = [];
          for (const player of team.players) {
            teamPlayers.push(player.id);
            teamPlayerNames.push(player.name);
          }

          // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É, –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
          let teamId;
          const foundedTeam = await TeamModel.findExistingTeam(
            teamPlayers,
            connection
          );
          if (!foundedTeam) {
            teamId = await TeamModel.createTeam(teamPlayers, connection);
          } else {
            teamId = foundedTeam?.id;
          }

          const results = teamResults.get(team.orderNum);
          if (!results) {
            throw new Error("–ù–µ –º–æ–∂–µ—Ç —Ç–∞–∫–æ–≥–æ –±—ã—Ç—å ))");
          }

          // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤
          // –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º points –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º
          const points =
            results.points !== undefined
              ? results.points
              : getPoints(
                  tournamentCategory,
                  results.cup,
                  results.cupPosition,
                  effectiveTeamsCount,
                  results.qualifyingWins
                );

          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –ë–î
          await TournamentModel.addTournamentResult(
            tournamentId,
            teamId,
            results.wins,
            results.loses,
            results.cupPosition,
            results.cup,
            results.qualifyingWins!,
            points,
            connection
          );
        }

        await connection.commit();
        console.log("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

        // –ï—Å–ª–∏ —ç—Ç–æ DOUBLETTE —Ç—É—Ä–Ω–∏—Ä –∏ –Ω–∞–π–¥–µ–Ω –ø–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –µ–≥–æ –æ—á–∫–∏
        if (
          (tournamentType === TournamentType.DOUBLETTE_MALE ||
            tournamentType === TournamentType.DOUBLETTE_FEMALE) &&
          effectiveTeamsCount > teams.length
        ) {
          console.log(
            "üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–∫–∏ –¥–ª—è –ø–∞—Ä–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ —Å —É—á—ë—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞..."
          );

          // –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä
          const pairType =
            tournamentType === TournamentType.DOUBLETTE_MALE
              ? TournamentType.DOUBLETTE_FEMALE
              : TournamentType.DOUBLETTE_MALE;

          const [pairTournaments] = await pool.execute<any[]>(
            `SELECT id FROM tournaments WHERE date = ? AND type = ? AND id != ?`,
            [tournamentDate, pairType, tournamentId]
          );

          if (pairTournaments.length > 0) {
            const pairTournamentId = pairTournaments[0].id;
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ—Å—á—ë—Ç–∞
            await TournamentModel.recalculateTournamentPoints(pairTournamentId);
          }
        }
      } catch (error) {
        await connection.rollback();
        console.error(
          "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞, —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:",
          error
        );
        throw error;
      } finally {
        connection.release();
      }

      console.log(
        `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: —Ç—É—Ä–Ω–∏—Ä ID ${tournamentId}, –∫–æ–º–∞–Ω–¥ - ${teams.length}`
      );

      return {
        tournamentId,
        teamsCount: teams.length,
        resultsCount: 0, //TODO: –∏–∑–±–∞–≤–∏—Ç—å—Å—è
      };
    } catch (error) {
      console.error(
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ "${fileName}":`,
        error
      );

      // –í–ê–ñ–ù–û: –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä
      // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ - —Ç—É—Ä–Ω–∏—Ä –ª–∏–±–æ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω,
      // –ª–∏–±–æ —É–∂–µ —É–¥–∞–ª—ë–Ω –≤ –±–ª–æ–∫–µ try-catch –≤—ã—à–µ

      throw new Error((error as Error).message);
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞/–∫—É–±–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  static async deleteTournamentResult(req: Request, res: Response) {
    const resultId = parseInt(req.params.resultId);

    if (isNaN(resultId)) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
      });
    }

    try {
      const success = await TournamentModel.deleteTournamentResult(resultId);

      if (!success) {
        return res.status(404).json({
          success: false,
          message: "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }

      res.json({
        success: true,
        message: "–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—á–∫–æ–≤ –∑–∞ –∫—É–±–∫–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getCupPointsConfig(req: Request, res: Response) {
    try {
      const config = getAllCupPointsConfig();
      res.json({
        success: true,
        data: config,
        description:
          "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∫–æ–≤ –∑–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫—É–±–∫–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∫–æ–≤ –∫—É–±–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE SHEETS ==========

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets
   */
  static async parseTournamentFromGoogleSheets(
    googleSheetsUrl: string,
    tournamentName: string,
    tournamentDate: string,
    tournamentType: TournamentType,
    tournamentCategory: TournamentCategoryEnum
  ): Promise<{
    tournamentId: number;
    teamsCount: number;
    resultsCount: number;
  }> {
    console.log(
      `üîó –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets: ${googleSheetsUrl}`
    );

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
      const accessCheck = await GoogleSheetsService.checkTableAccess(
        googleSheetsUrl
      );

      if (!accessCheck.accessible) {
        throw new Error(`Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${accessCheck.error}`);
      }

      console.log(
        `‚úì Google —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: ${accessCheck.sheetNames.join(
          ", "
        )}`
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ workbook
      const { workbook, fileName } =
        await GoogleSheetsService.getTournamentDataAsBuffer(googleSheetsUrl);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
      return await this.parseTournamentData(
        Buffer.alloc(0), // –ü—É—Å—Ç–æ–π buffer, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º workbook –Ω–∞–ø—Ä—è–º—É—é
        fileName,
        tournamentName,
        tournamentDate,
        tournamentType,
        tournamentCategory,
        workbook // –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π workbook
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets:", error);
      throw new Error((error as Error).message);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets API –∫–ª—é—á–∞
   */
  static async testGoogleSheetsApiKey(req: Request, res: Response) {
    try {
      // –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ Google (–ø—É–±–ª–∏—á–Ω–∞—è)
      const testSpreadsheetId = "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms";

      console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets API –∫–ª—é—á–∞...");

      // –í—ã–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
      GoogleSheetsService.debugApiKey();

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –ª–∏—Å—Ç–æ–≤ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
      const sheetNames = await GoogleSheetsService.getSheetNames(
        testSpreadsheetId
      );

      res.json({
        success: true,
        message: "Google Sheets API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
        data: {
          testSpreadsheetId,
          sheetNames,
          totalSheets: sheetNames.length,
        },
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheets API:", error);

      res.status(500).json({
        success: false,
        message: `–û—à–∏–±–∫–∞ Google Sheets API: ${(error as Error).message}`,
        details: {
          error: (error as Error).message,
          stack: (error as Error).stack,
        },
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google —Ç–∞–±–ª–∏—Ü—ã (endpoint –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
   */
  static async checkGoogleSheetsAccess(req: Request, res: Response) {
    try {
      const { url } = req.body;

      if (!url) {
        return res.status(400).json({
          success: false,
          message: "URL Google —Ç–∞–±–ª–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        });
      }

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google —Ç–∞–±–ª–∏—Ü—ã: ${url}`);

      const result = await GoogleSheetsService.checkTableAccess(url);

      if (!result.accessible) {
        return res.status(400).json({
          success: false,
          message: result.error || "Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        });
      }

      res.json({
        success: true,
        message: "Google —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è",
        data: {
          spreadsheetId: result.spreadsheetId,
          sheetNames: result.sheetNames,
          totalSheets: result.sheetNames.length,
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Google —Ç–∞–±–ª–∏—Ü—ã:", error);
      res.status(500).json({
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Google —Ç–∞–±–ª–∏—Ü—ã: ${
          (error as Error).message
        }`,
      });
    }
  }
}

export default TournamentController;
