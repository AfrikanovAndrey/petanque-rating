import { Request, Response } from "express";
import * as XLSX from "xlsx";
import {
  getAllCupPointsConfig,
  getCupPoints,
  getPointsByQualifyingStage,
  getPointsExample,
} from "../config/cupPoints";
// import removed: PlayerTournamentPointsModel –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
import {
  normalizeName,
  REGISTRATION_LIST,
  SWISS_RESULTS_LIST,
  TeamPlayers,
  TeamQualifyingResults,
  TournamentParser,
} from "../controllers/TournamentParser";
import { TeamModel } from "../models/TeamModel";
import { TournamentModel } from "../models/TournamentModel";
import { GoogleSheetsService } from "../services/GoogleSheetsService";
import { Cup, CupPosition, TeamResults } from "../types";
import ExcelUtils from "../utils/excelUtils";

export class TournamentController {
  private static readonly quarterFinalsPlayersCells = [
    "B4",
    "B8",
    "B12",
    "B16",
    "B20",
    "B24",
    "B28",
    "B32",
  ];
  private static readonly semiFinalsPlayersCells = ["F6", "F14", "F22", "F30"];
  private static readonly finalsPlayersCells = ["J10", "J26"];
  private static readonly thirdPlacePlayersCells = ["F38"];

  // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∏–∑ Excel —Å enum CupPosition
  static mapExcelPositionToCupPosition(excelPosition: string): CupPosition {
    switch (excelPosition.trim()) {
      case "1":
        return CupPosition.WINNER;
      case "2":
        return CupPosition.RUNNER_UP;
      case "3":
        return CupPosition.THIRD_PLACE;
      case "1/2":
        return CupPosition.SEMI_FINAL;
      case "1/4":
        return CupPosition.QUARTER_FINAL;
      default:
        console.warn(
          `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∏–∑ Excel: "${excelPosition}", –∏—Å–ø–æ–ª—å–∑—É–µ–º QUARTER_FINAL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é`
        );
        return CupPosition.QUARTER_FINAL;
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –¥–∞–Ω–Ω—ã–º–∏ —Å –∫—É–±–∫–æ–≤
   * @param cup
   * @param cupTeamResults
   * @param teams
   * @param teamResults
   */
  static async modifyTeamResultsWithCupResults(
    cup: Cup,
    cupTeamResults: Map<number, CupPosition>,
    teams: TeamPlayers[],
    teamResults: Map<number, TeamResults>
  ) {
    for (const [teamOrderNum, cupPosition] of cupTeamResults) {
      const curTeamResults = teamResults.get(teamOrderNum);

      if (!curTeamResults) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã #${teamOrderNum}`);
      }

      let winsModifier = 0;
      let losesModifier = 0;

      switch (cupPosition) {
        case CupPosition.WINNER:
          winsModifier = 3;
          losesModifier = 0;
          break;
        case CupPosition.RUNNER_UP:
          winsModifier = 2;
          losesModifier = 1;
          break;
        case CupPosition.THIRD_PLACE:
          winsModifier = 2;
          losesModifier = 1;
          break;
        case CupPosition.SEMI_FINAL:
          winsModifier = 1;
          losesModifier = 1;
          break;
        case CupPosition.QUARTER_FINAL:
          winsModifier = 0;
          losesModifier = 1;
          break;
      }

      teamResults.set(teamOrderNum, {
        cup,
        cupPosition,
        qualifyingWins: curTeamResults.wins,
        wins: curTeamResults.wins + winsModifier,
        loses: curTeamResults.loses + losesModifier,
      });
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º
  static validateDocumentStructure(workbook: XLSX.WorkBook) {
    console.log("üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞");
    const errors: string[] = [];

    if (!ExcelUtils.findXlsSheet(workbook, REGISTRATION_LIST)) {
      errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.`);
    }

    if (!ExcelUtils.findXlsSheet(workbook, /^–∫—É–±–æ–∫ [a–∞]$/)) {
      errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç '–ö—É–±–æ–∫ –ê'`);
    }

    if (!ExcelUtils.findXlsSheet(workbook, /^–∫—É–±–æ–∫ [b–±]$/)) {
      errors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç '–ö—É–±–æ–∫ –ë'`);
    }

    const swissSheet = ExcelUtils.findXlsSheet(workbook, SWISS_RESULTS_LIST);
    const groupSheet = ExcelUtils.findXlsSheet(workbook, /–ì—Ä—É–ø–ø–∞ \w+/);

    if (!swissSheet && !groupSheet) {
      errors.push(
        `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ª–∏—Å—Ç—ã –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞: "${SWISS_RESULTS_LIST}" –∏–ª–∏ "–ì—Ä—É–ø–ø–∞ –ê"`
      );
    }

    if (errors.length > 0) {
      throw new Error(errors.join("\n"));
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getAllTournaments(req: Request, res: Response) {
    try {
      const tournaments = await TournamentModel.getAllTournaments();
      res.json({ success: true, data: tournaments });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤:", error);
      res
        .status(500)
        .json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getTournamentDetails(req: Request, res: Response) {
    const tournamentId = parseInt(req.params.id);

    if (isNaN(tournamentId)) {
      return res
        .status(400)
        .json({ success: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞" });
    }

    try {
      const tournament = await TournamentModel.getTournamentById(tournamentId);

      if (!tournament) {
        return res
          .status(404)
          .json({ success: false, message: "–¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const results = await TournamentModel.getTournamentResults(tournamentId);

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫—É–±–∫–∞–º
      const filteredResults = results.filter((result) => result.cup);

      const sortedResults = filteredResults.sort((a, b) => {
        // –ü–æ—Ä—è–¥–æ–∫ –ø–æ–∑–∏—Ü–∏–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–ª—É—á—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–µ—Ä–≤—ã–º–∏)
        const positionPriority: Record<string, number> = {
          WINNER: 1,
          "1": 1, // —Ç–æ–∂–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
          RUNNER_UP: 2,
          "2": 2, // —Ç–æ–∂–µ –≤—Ç–æ—Ä–æ–µ –º–µ—Å—Ç–æ
          THIRD_PLACE: 3,
          "3": 3, // —Ç–æ–∂–µ —Ç—Ä–µ—Ç—å–µ –º–µ—Å—Ç–æ
          SEMI_FINAL: 4,
          "1/2": 4, // –ø–æ–ª—É—Ñ–∏–Ω–∞–ª
          QUARTER_FINAL: 5,
          "1/4": 5, // —á–µ—Ç–≤–µ—Ä—Ç—å—Ñ–∏–Ω–∞–ª
        };

        // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫—É–±–∫—É (A, –∑–∞—Ç–µ–º B)
        if (a.cup !== b.cup) {
          return a.cup!.localeCompare(b.cup!);
        }

        // –ó–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –∫—É–±–∫–∞
        const aPriority = positionPriority[a.cup_position] || 999;
        const bPriority = positionPriority[b.cup_position] || 999;

        return aPriority - bPriority;
      });

      res.json({
        success: true,
        data: {
          ...tournament,
          results: sortedResults,
        },
      });
    } catch (error) {
      console.error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞ ${tournamentId}:`,
        error
      );
      res
        .status(500)
        .json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getTournamentsStats(req: Request, res: Response) {
    try {
      const tournaments = await TournamentModel.getAllTournaments();

      const stats = {
        totalTournaments: tournaments.length,
        recentTournaments: tournaments
          .sort(
            (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
          )
          .slice(0, 5),
        tournamentsThisYear: tournaments.filter(
          (t) => new Date(t.date).getFullYear() === new Date().getFullYear()
        ).length,
      };

      res.json({ success: true, data: stats });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:", error);
      res
        .status(500)
        .json({ success: false, message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }

  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–£–ë–ö–ê–ú–ò ==========

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getAllCupResults(req: Request, res: Response) {
    try {
      const results = await TournamentModel.getCupResults();
      res.json({ success: true, data: results });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–æ–≤:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–æ–≤ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getCupResultsByTournament(req: Request, res: Response) {
    const tournamentId = parseInt(req.params.id);

    if (isNaN(tournamentId)) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞",
      });
    }

    try {
      const results = await TournamentModel.getCupResultsByTournament(
        tournamentId
      );
      res.json({ success: true, data: results });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫—É–±–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getCupResultsByCup(req: Request, res: Response) {
    const tournamentId = parseInt(req.params.id);
    const cup = req.params.cup;

    if (isNaN(tournamentId)) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞",
      });
    }

    if (!cup) {
      return res.status(400).json({
        success: false,
        message: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫—É–±–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ",
      });
    }

    try {
      const results = await TournamentModel.getCupResultsByCup(
        tournamentId,
        cup
      );
      res.json({ success: true, data: results });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // ################################################################
  // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞
  // ################################################################
  static async parseTournamentData(
    fileBuffer: Buffer,
    fileName: string,
    tournamentName: string,
    tournamentDate: string,
    tournamentCategory: "1" | "2",
    providedWorkbook?: XLSX.WorkBook
  ): Promise<{
    tournamentId: number;
    teamsCount: number;
    resultsCount: number;
  }> {
    console.log(
      `üöÄ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: "${fileName}"`
    );

    // –£–±–∏—Ä–∞–µ–º –±–æ–ª—å—à—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

    try {
      console.log(
        `–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π: "${fileName}"`
      );

      // –ü–∞—Ä—Å–∏–º XLSX —Ñ–∞–π–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π workbook
      let workbook: XLSX.WorkBook;
      try {
        if (providedWorkbook) {
          workbook = providedWorkbook;
          console.log(
            `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π workbook (Google Sheets). –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã: ${workbook.SheetNames.join(
              ", "
            )}`
          );
        } else {
          workbook = XLSX.read(fileBuffer, { type: "buffer" });
          console.log(
            `–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ: ${workbook.SheetNames.join(", ")}`
          );
        }
      } catch (error) {
        throw new Error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞ "${fileName}": ${
            (error as Error).message
          }`
        );
      }

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤
      this.validateDocumentStructure(workbook);
      console.log("‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞");

      // 2. –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö c –ª–∏—Å—Ç–æ–≤
      // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–∞–Ω–¥–∞—Ö
      const teams = await TournamentParser.parseTeamsFromRegistrationSheet(
        workbook
      );

      // 3. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–∞—Ö –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞
      let teamQualifyingResults = new Map<number, TeamQualifyingResults>();

      const swissSheet = ExcelUtils.findXlsSheet(
        workbook,
        normalizeName(SWISS_RESULTS_LIST)
      );
      const groupSheet = ExcelUtils.findXlsSheet(workbook, /–ì—Ä—É–ø–ø–∞ \w+/);

      // –õ–∏–±–æ –Ω–∞—Ö–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –®–≤–µ–π—Ü–∞—Ä–∫–∏, –ª–∏–±–æ –≥—Ä—É–ø–ø
      if (swissSheet) {
        teamQualifyingResults = await TournamentParser.parseSwissSystemResults(
          workbook,
          teams
        );
      } else if (groupSheet) {
        teamQualifyingResults = await TournamentParser.parseGroupResults(
          workbook,
          teams
        );
      }

      console.log(`### –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞`);
      for (const [teamOrderNum, results] of teamQualifyingResults) {
        console.log(
          `Team #${teamOrderNum} : ${JSON.stringify(results, null, 0)}`
        );
      }

      const aCupTeamsResults = await TournamentParser.parseCupResults(
        workbook,
        "A",
        teams
      );
      const bCupTeamsResults = await TournamentParser.parseCupResults(
        workbook,
        "B",
        teams
      );
      const cCupTeamsResults = await TournamentParser.parseCupResults(
        workbook,
        "C",
        teams
      );

      // 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–∞–Ω–¥ –≤–º–µ—Å—Ç–µ
      const orderedTeamResults: Map<number, TeamResults> = new Map(); // key = teamOrderNum
      for (const [teamOrderNum, qualifyingResults] of teamQualifyingResults) {
        orderedTeamResults.set(teamOrderNum, {
          qualifyingWins: qualifyingResults.wins,
          wins: qualifyingResults.wins,
          loses: qualifyingResults.loses,
        });
      }

      // –ü—Ä–∏–≤–∑—è–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫—É–±–∫–æ–≤ - –∫–æ–º–∞–Ω–¥–µ
      // –ö—É–±–æ–∫ –ê
      await this.modifyTeamResultsWithCupResults(
        "A",
        aCupTeamsResults,
        teams,
        orderedTeamResults
      );

      if (bCupTeamsResults) {
        await this.modifyTeamResultsWithCupResults(
          "B",
          bCupTeamsResults,
          teams,
          orderedTeamResults
        );
      }

      if (cCupTeamsResults) {
        await this.modifyTeamResultsWithCupResults(
          "C",
          cCupTeamsResults,
          teams,
          orderedTeamResults
        );
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ

      const teamResults: Map<number, TeamResults> = new Map(); // key = teamId

      const tournamentId = await TournamentModel.createTournament(
        tournamentName,
        tournamentDate
      );

      for (const team of teams) {
        const teamPlayers: number[] = [];
        const teamPlayerNames: string[] = [];
        for (const player of team.players) {
          teamPlayers.push(player.id);
          teamPlayerNames.push(player.name);
        }

        // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É, –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
        let teamId;
        const foundedTeam = await TeamModel.findExistingTeam(teamPlayers);
        if (!foundedTeam) {
          teamId = await TeamModel.createTeam(teamPlayers);
        } else {
          teamId = foundedTeam?.id;
        }

        const results = orderedTeamResults.get(team.orderNum);
        if (!results) {
          throw new Error();
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –æ—á–∫–æ–≤
        let points = 0;
        if (results.cup) {
          points = getCupPoints(
            tournamentCategory,
            results.cup!,
            results.cupPosition!,
            teams.length
          );
        } else {
          points = getPointsByQualifyingStage(
            tournamentCategory,
            results.qualifyingWins!
          );
        }

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –≤ –ë–î
        TournamentModel.addTournamentResult(
          tournamentId,
          teamId,
          results.wins,
          results.loses,
          results.cupPosition,
          results.cup,
          results.qualifyingWins!,
          points
        );
      }

      console.log(
        `‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ: —Ç—É—Ä–Ω–∏—Ä ID ${tournamentId}, –∫–æ–º–∞–Ω–¥ - ${teams.length}`
      );

      return {
        tournamentId,
        teamsCount: teams.length,
        resultsCount: 0, //TODO: –∏–∑–±–∞–≤–∏—Ç—å—Å—è
      };
    } catch (error) {
      console.error(
        `‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–∞–π–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞ "${fileName}":`,
        error
      );

      // –í–ê–ñ–ù–û: –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä
      // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ - —Ç—É—Ä–Ω–∏—Ä –ª–∏–±–æ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω,
      // –ª–∏–±–æ —É–∂–µ —É–¥–∞–ª—ë–Ω –≤ –±–ª–æ–∫–µ try-catch –≤—ã—à–µ

      throw new Error((error as Error).message);
    }
  }

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Excel —Ñ–∞–π–ª–∞
  static analyzeExcelFileStructure(fileBuffer: Buffer, fileName: string) {
    try {
      const workbook = XLSX.read(fileBuffer, { type: "buffer" });

      const analysis: {
        fileName: string;
        totalSheets: number;
        sheets: Array<{
          name: string;
          rowCount: number;
          columnCount: number;
          isEmpty: boolean;
          firstRowSample: unknown;
        }>;
        registrationSheetFound: boolean;
        cupSheetsFound: string[];
        recommendations: string[];
      } = {
        fileName: fileName,
        totalSheets: workbook.SheetNames.length,
        sheets: [],
        registrationSheetFound: false,
        cupSheetsFound: [],
        recommendations: [],
      };

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç
      workbook.SheetNames.forEach((sheetName, index) => {
        const sheet = workbook.Sheets[sheetName];
        const jsonData = XLSX.utils.sheet_to_json(sheet, { header: 1 });

        const sheetInfo = {
          name: sheetName,
          rowCount: jsonData.length,
          columnCount:
            jsonData.length > 0
              ? Math.max(...jsonData.map((row) => (row as any[]).length))
              : 0,
          isEmpty: jsonData.length === 0,
          firstRowSample: jsonData.length > 0 ? jsonData[0] : null,
        };

        analysis.sheets.push(sheetInfo);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥–ª—è –ª–∏—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        const registrationSheetNames = [
          "–ª–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
          "–ª–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
          "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
          "registration",
          "sheet1",
          "–∫–æ–º–∞–Ω–¥—ã",
          "teams",
        ];

        if (
          registrationSheetNames.some((name) =>
            sheetName.toLowerCase().includes(name.toLowerCase())
          )
        ) {
          analysis.registrationSheetFound = true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—Å—Ç—ã –∫—É–±–∫–æ–≤
        if (
          sheetName.toLowerCase().includes("–∫—É–±–æ–∫") ||
          sheetName.toLowerCase().includes("cup")
        ) {
          analysis.cupSheetsFound.push(sheetName);
        }
      });

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (!analysis.registrationSheetFound) {
        analysis.recommendations.push(
          "–ù–µ –Ω–∞–π–¥–µ–Ω –ª–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–æ–∑–¥–∞–π—Ç–µ –ª–∏—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '–õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–∏—Å—Ç."
        );
      }

      if (analysis.cupSheetsFound.length === 0) {
        analysis.recommendations.push(
          "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã –∫—É–±–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ª–∏—Å—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ '–ö—É–±–æ–∫ –ê' –∏ '–ö—É–±–æ–∫ –ë' –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞."
        );
      }

      return analysis;
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞: ${(error as Error).message}`);
    }
  }

  // Endpoint –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞
  static async diagnoseFile(req: Request, res: Response) {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        message: "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω",
      });
    }

    try {
      const analysis = this.analyzeExcelFileStructure(
        req.file.buffer,
        req.file.originalname
      );

      res.json({
        success: true,
        message: "–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω",
        data: analysis,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ñ–∞–π–ª–∞:", error);
      res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: " + (error as Error).message,
      });
    }
  }

  // –£–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç—É—Ä–Ω–∏—Ä–∞/–∫—É–±–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)
  static async deleteTournamentResult(req: Request, res: Response) {
    const resultId = parseInt(req.params.resultId);

    if (isNaN(resultId)) {
      return res.status(400).json({
        success: false,
        message: "–ù–µ–≤–µ—Ä–Ω—ã–π ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
      });
    }

    try {
      const success = await TournamentModel.deleteTournamentResult(resultId);

      if (!success) {
        return res.status(404).json({
          success: false,
          message: "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
        });
      }

      res.json({
        success: true,
        message: "–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—á–∫–æ–≤ –∑–∞ –∫—É–±–∫–∏ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getCupPointsConfig(req: Request, res: Response) {
    try {
      const config = getAllCupPointsConfig();
      res.json({
        success: true,
        data: config,
        description:
          "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∫–æ–≤ –∑–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫—É–±–∫–∞—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—á–∫–æ–≤ –∫—É–±–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤ (–ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø)
  static async getCupPointsExamples(req: Request, res: Response) {
    try {
      const examples = getPointsExample();
      res.json({
        success: true,
        data: examples,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –æ—á–∫–æ–≤ –∫—É–±–∫–∞:", error);
      res.status(500).json({
        success: false,
        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
      });
    }
  }

  // ========== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° GOOGLE SHEETS ==========

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets
   */
  static async parseTournamentFromGoogleSheets(
    googleSheetsUrl: string,
    tournamentName: string,
    tournamentDate: string,
    tournamentCategory: "1" | "2"
  ): Promise<{
    tournamentId: number;
    teamsCount: number;
    resultsCount: number;
  }> {
    console.log(
      `üîó –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets: ${googleSheetsUrl}`
    );

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
      const accessCheck = await GoogleSheetsService.checkTableAccess(
        googleSheetsUrl
      );

      if (!accessCheck.accessible) {
        throw new Error(`Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${accessCheck.error}`);
      }

      console.log(
        `‚úì Google —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞–π–¥–µ–Ω—ã –ª–∏—Å—Ç—ã: ${accessCheck.sheetNames.join(
          ", "
        )}`
      );

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ workbook
      const { workbook, fileName } =
        await GoogleSheetsService.getTournamentDataAsBuffer(googleSheetsUrl);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
      return await this.parseTournamentData(
        Buffer.alloc(0), // –ü—É—Å—Ç–æ–π buffer, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º workbook –Ω–∞–ø—Ä—è–º—É—é
        fileName,
        tournamentName,
        tournamentDate,
        tournamentCategory,
        workbook // –ü–µ—Ä–µ–¥–∞–µ–º –≥–æ—Ç–æ–≤—ã–π workbook
      );
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ Google Sheets:", error);
      throw new Error((error as Error).message);
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets API –∫–ª—é—á–∞
   */
  static async testGoogleSheetsApiKey(req: Request, res: Response) {
    try {
      // –¢–µ—Å—Ç–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ Google (–ø—É–±–ª–∏—á–Ω–∞—è)
      const testSpreadsheetId = "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms";

      console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets API –∫–ª—é—á–∞...");

      // –í—ã–∑—ã–≤–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
      GoogleSheetsService.debugApiKey();

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –ª–∏—Å—Ç–æ–≤ –∏–∑ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
      const sheetNames = await GoogleSheetsService.getSheetNames(
        testSpreadsheetId
      );

      res.json({
        success: true,
        message: "Google Sheets API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!",
        data: {
          testSpreadsheetId,
          sheetNames,
          totalSheets: sheetNames.length,
        },
      });
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheets API:", error);

      res.status(500).json({
        success: false,
        message: `–û—à–∏–±–∫–∞ Google Sheets API: ${(error as Error).message}`,
        details: {
          error: (error as Error).message,
          stack: (error as Error).stack,
        },
      });
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google —Ç–∞–±–ª–∏—Ü—ã (endpoint –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
   */
  static async checkGoogleSheetsAccess(req: Request, res: Response) {
    try {
      const { url } = req.body;

      if (!url) {
        return res.status(400).json({
          success: false,
          message: "URL Google —Ç–∞–±–ª–∏—Ü—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω",
        });
      }

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Google —Ç–∞–±–ª–∏—Ü—ã: ${url}`);

      const result = await GoogleSheetsService.checkTableAccess(url);

      if (!result.accessible) {
        return res.status(400).json({
          success: false,
          message: result.error || "Google —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        });
      }

      res.json({
        success: true,
        message: "Google —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è",
        data: {
          spreadsheetId: result.spreadsheetId,
          sheetNames: result.sheetNames,
          totalSheets: result.sheetNames.length,
        },
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Google —Ç–∞–±–ª–∏—Ü—ã:", error);
      res.status(500).json({
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Google —Ç–∞–±–ª–∏—Ü—ã: ${
          (error as Error).message
        }`,
      });
    }
  }
}

// CREATE TABLE `tournament_results` (
//   `id` int NOT NULL AUTO_INCREMENT,
//   `tournament_id` int NOT NULL,
//   `team_id` int NOT NULL,
//   `cup` enum('A','B') DEFAULT NULL,
//   `qualifying_wins` int DEFAULT '0',
//   `points` int NOT NULL DEFAULT '0',
//   `wins` int DEFAULT '0',
//   `loses` int DEFAULT '0',
//   `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
//   `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
//   `cup_position` enum('CUP_WINNER','CUP_RUNNER_UP','CUP_THIRD_PLACE','CUP_SEMI_FINAL','CUP_QUARTER_FINAL','QUALIFYING_HIGH','QUALIFYING_LOW') NOT NULL,
//   PRIMARY KEY (`id`),
//   KEY `team_id` (`team_id`),
//   KEY `idx_tournament_team` (`tournament_id`,`team_id`),
//   KEY `idx_tournament_cup` (`tournament_id`,`cup`),
//   KEY `idx_qualifying_wins` (`qualifying_wins`),
//   KEY `idx_wins` (`wins`),
//   KEY `idx_loses` (`loses`),
//   CONSTRAINT `tournament_results_ibfk_1` FOREIGN KEY (`tournament_id`) REFERENCES `tournaments` (`id`) ON DELETE CASCADE,
//   CONSTRAINT `tournament_results_ibfk_2` FOREIGN KEY (`team_id`) REFERENCES `teams` (`id`) ON DELETE CASCADE
// ) ENGINE=InnoDB AUTO_INCREMENT=777 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci

export default TournamentController;
